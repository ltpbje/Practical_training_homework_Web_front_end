<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <dateModified></dateModified>
    <ownerName></ownerName>
  </head>
  <body>
<outline text="vue基础">
  <outline text="1、MVVM开发概念与SPA概念">
    <outline text="1.1、MVVM" _note="我们在学习vue之前我们需要先了解一个概念叫做MVVM（model view and view&#10;model），其核心理念就是数据驱动页面，同时与之相对应的有一套叫做MVC的开发理念&#10;&#10;&gt; MVC解释:&#10;&gt;&#10;&gt; 以前的话很多后端开发的框架里面都会提到MVC概念（model view&#10;&gt; controller）这个MVC概念是一个前后端结合的一种开发方式（现在已经基本被替代了），现在的主流开发方式是前端后分离开发（前后端在开发的时候在两个不同的项目里面，真正开发完了以后还可以再次结合到一次）&#10;&#10;在目前的前端里面，我们学习过很多的知识，比如布局我们会是用css，操作页面JS中的DOM，而DOM技术其实本身也是一种开发思路，但是现在我们要完全抛弃DOM操作了&#10;&#10;MVVM不依赖DOM操作，它完全依靠数据，用数据去驱动页面&#10;&#10;目前流行MVVM框架或类似于MVVM核心理念的框架有很多，主流的以下几个\&#10;1、vue：它是一个入门型的开发框架，很容易上手，但是提高很难\&#10;2、react：上手难，提高更难\&#10;3、angular：难上加难\&#10;4、svelte：上手比较简单，但是非常考验基本功，特别是原生JS和底层JS，还有\&#10;ES6+">
    </outline>
    <outline text="1.2、SPA" _note="SPA全称叫做单页面应用程序，指的是整个程序在经过处理之后只有一个页面，单页web应用（single&#10;page web application，SPA） ，这种程序全程只靠一个web也完成&#10;&#10;上面介绍的 vue / react / angular 都可以实现单页面开发">
    </outline>
  </outline>
  <outline text="2、认识vue" _note="目前来讲vue的主要版本包含vue2和vue3，同时vue3里面基本上包含了vue2的所有核心功能，所以这里我们使用vue3的版本，同时讲解目前的2种语法&#10;&#10;&gt; 同时，现在只是针对vue框架本身功能的学习，我们还会使用到很多的vue框架体系下的其他工具来完成我们的项目开发，所以我们还会后续学习其他的vue体系下的工具&#10;&#10;1、第一种基于vue2的语法格式叫做 options API【选项式API】&#10;&#10;2、第二种基于vue3的语法格式叫做 composiAPItion API【组合式API】&#10;&#10;在vue中先引入vue框架来学习vue的基础语法&#10;&#10;``` html&#10;&lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&#10;&lt;/script&gt;&#10;```">
  </outline>
  <outline text="3、Vue接管页面数据" _note="vue是一个数据驱动页面并实现单页面开发的框架，数据驱动页面就是使用数据管理页面，简而言之，**就是数据变化，页面变化，同时页面变化，数据也变化**&#10;&#10;**数据与页面实现了双向的绑定**&#10;&#10;在旧版本里面，我们使用如下方式实现vue实例&#10;&#10;``` javascript&#10;new Vue();&#10;```&#10;&#10;但是现在我们引入的是vue3的框架，所以以上写法在3的体系下会报错，新版本使用如下&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;h1&gt;{{userName}}&lt;/h1&gt;&#10;        &lt;input type=&quot;text&quot; v-model=&quot;userName&quot;&gt;&#10;    &lt;/div&gt;&#10;&#10;&#10;&lt;/body&gt;&#10;&lt;script&gt;&#10;    Vue.createApp({&#10;        //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;        data() {&#10;            //data这里return返回的对象里面就是页面接管区域的数据来源&#10;            return {&#10;                userName: '张三'&#10;            };&#10;        },&#10;    }).mount('#app');&#10;&lt;/script&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;在上面的例子中，我们可以发现如果要继续操作页面，已经可以不再依赖DOM技术">
  </outline>
  <outline text="4、vue的数据绑定">
    <outline text="4.1、插值语法" _note="``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;01-插值语法&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;h1&gt;{{userName}}&lt;/h1&gt;&#10;        &lt;h2&gt;{{age}} &lt;/h2&gt;&#10;        &lt;h2&gt;{{age}} &lt;/h2&gt;&#10;        &lt;!-- 二进制 --&gt;&#10;        &lt;h2&gt;{{num1.toString(2)}} &lt;/h2&gt;&#10;        &lt;h2&gt;{{}}&lt;/h2&gt;&#10;        &lt;h2&gt;{{1+1}}&lt;/h2&gt;&#10;        &lt;h2&gt;{{str1}}&lt;/h2&gt;&#10;        &lt;h2 v-html=&quot;str1&quot;&gt;&lt;/h2&gt;&#10;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    userName: '张三',&#10;                    age: 20,&#10;                    num1: 18,&#10;                    str1: &quot;&lt;input type='text' placeholder = '请输入账号'&gt; &quot;&#10;                };&#10;            },&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 插值语法通过 {{ }}&#10;&gt; 形式在页面上显示数据，这个数据的来源是vue的data里所存在的数据，同时插值语法也面在里面写普通的ES代码，比如条件运算，方法的调用执行，这种种插值语法旧相当于设置了一个元素的innerText属性">
    </outline>
    <outline text="4.2、v-text" _note="``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;02-vue指令语法&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;       &lt;h2 v-text=&quot;str1&quot;&gt;&lt;/h2&gt;&#10;        &lt;h2 v-text=&quot;userName&quot;&gt;&lt;/h2&gt;&#10;        &lt;h2 v-html=&quot;str1&quot;&gt;&lt;/h2&gt; &#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    userName: '张三',&#10;                    age: 20,&#10;                    num1: 18,&#10;                    str1: &quot;&lt;input type='text' placeholder = '请输入账号'&gt; &quot;&#10;                };&#10;            },&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; v-text就相当于原生DOM中的innerText属性">
    </outline>
    <outline text="4.3、v-html" _note="``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;02-vue指令语法&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;		&lt;h2 v-html=&quot;str1&quot;&gt;&lt;/h2&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    userName: '张三',&#10;                    age: 20,&#10;                    num1: 18,&#10;                    str1: &quot;&lt;input type='text' placeholder = '请输入账号'&gt; &quot;&#10;                };&#10;            },&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 这个v-html就相当于是innerHTML属性">
    </outline>
    <outline text="4.4、v-model" _note="在页面上显示数据的时候，我们还有一种特殊的元素就是表单，如果要绑定表单元素的数据，则要使用v-model&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;02-vue指令语法&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;!-- &lt;h2 v-text=&quot;str1&quot;&gt;&lt;/h2&gt;&#10;        &lt;h2 v-text=&quot;userName&quot;&gt;&lt;/h2&gt;&#10;        &lt;h2 v-html=&quot;str1&quot;&gt;&lt;/h2&gt; --&gt;&#10;&#10;        &lt;!-- v-model --&gt;&#10;        &lt;h2&gt;{{userName}} &lt;/h2&gt;&#10;        &lt;input type=&quot;text&quot; v-model=&quot;userName&quot;&gt;&#10;        &lt;br&gt;&#10;        &lt;input type=&quot;range&quot; v-model=&quot;age&quot;&gt;&#10;        &lt;h2&gt; {{age}}&lt;/h2&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    userName: '张三',&#10;                    age: 20,&#10;                    num1: 18,&#10;                    str1: &quot;&lt;input type='text' placeholder = '请输入账号'&gt; &quot;&#10;                };&#10;            },&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;接一下实现一个单选绑定&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;vue&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;男&quot; v-model=&quot;a&quot;&gt;男&#10;        &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;女&quot; v-model=&quot;a&quot;&gt;女&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    a: '女',&#10;                    userName: '张三',&#10;                    age: 20,&#10;                    num1: 18,&#10;                    str1: &quot;&lt;input type='text' placeholder = '请输入账号'&gt; &quot;&#10;                };&#10;            },&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;我们再来实现一个多选绑定&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; v-model=&quot;hobbyList&quot; value=&quot;看书&quot;&gt;看书&#10;        &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; v-model=&quot;hobbyList&quot; value=&quot;睡觉&quot;&gt;睡觉&#10;        &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; v-model=&quot;hobbyList&quot; value=&quot;吃饭&quot;&gt;吃饭&#10;        &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; v-model=&quot;hobbyList&quot; value=&quot;玩游戏&quot;&gt;玩游戏&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    hobbyList: ['看书', '吃饭']&#10;                };&#10;            },&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 注意：&#10;&gt;&#10;&gt; 多选框的绑定是需要使用数组的方式去完成的">
    </outline>
    <outline text="4.5、v-once" _note="v-once是单次绑定，它只会在第一次的时候做数据渲染，渲染完成之后就于vue断开了联系，后续如果数据发生变化，这个地方（整个元素）不再变化&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;input type=&quot;text&quot; v-model=&quot;userName&quot;&gt;&#10;        &lt;h2&gt;{{userName}} &lt;/h2&gt;&#10;        &lt;h2 v-once&gt;{{userName}}&lt;/h2&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    userName: '张三'&#10;                };&#10;            },&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```">
    </outline>
    <outline text="4.6、v-show" _note="``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;h2 v-show=&quot;true&quot;&gt;今天是双11&lt;/h2&gt;&#10;        &lt;h2 v-show=&quot;false&quot;&gt;东西都很便宜&lt;/h2&gt;&#10;        &lt;h2 v-show=&quot;1&gt;2&quot;&gt;我昨天买了一个平板&lt;/h2&gt;&#10;        &lt;h2 v-show=&quot;'0'&quot;&gt;比平时便宜800块&lt;/h2&gt;&#10;        &lt;h2&gt;纠结好久是买新的还是二手的&lt;/h2&gt;&#10;        &lt;h2&gt;因为二手的比新的还要便宜800&lt;/h2&gt;&#10;        &lt;!-- 大家要记得可以为false的6个值是什么 --&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    userName: '张三'&#10;                };&#10;            },&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 通过上面的例子，我们可以看到，这里显示或者不显示已经变的非常简单，只要v-show的值为true就显示，为false就隐藏，通过display样式来完成&#10;&#10;在工作中，v-show使用会非常频繁，举例&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;input type=&quot;range&quot; v-model=&quot;age&quot;&gt;{{age}}&#10;        &lt;h2 v-show=&quot;age&lt;18&quot;&gt;你的年龄没有达到18岁，所以你不能进入网吧&lt;/h2&gt;&#10;        &lt;hr&gt;&#10;        &lt;input type=&quot;text&quot; v-model=&quot;userName&quot; placeholder=&quot;请输入用户名&quot;&gt;&#10;        &lt;span v-show=&quot;userName.length ==0&quot;&gt;用户名不能为空&lt;/span&gt;&#10;        &lt;hr&gt;&#10;        &lt;input type=&quot;text&quot; v-model=&quot;money&quot;&gt;&#10;        &lt;span v-show=&quot;!/^\d+(\.\d+)*$/.test(money)&quot;&gt;必须是数字&lt;/span&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    userName: '张三',&#10;                    age: 18,&#10;                    money: 0&#10;                };&#10;            },&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```">
    </outline>
    <outline text="4.7、v-if、v-else、v-else-if" _note="条件渲染，根据条件来决定是否渲染，这个东西与v-show看起来非常像，但是本质上是完全不同的两个东西&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;h2 v-if=&quot;age&gt;=18&quot;&gt;你是大人&lt;/h2&gt;&#10;        &lt;h2 v-else&gt;你是小孩&lt;/h2&gt;&#10;        &lt;hr&gt;&#10;        &lt;input type=&quot;text&quot; v-model=&quot;score&quot;&gt;&#10;        &lt;h2 v-if=&quot;score&gt;=90&quot;&gt;优秀&lt;/h2&gt;&#10;        &lt;h2 v-else-if=&quot;score&gt;=80&quot;&gt;良好&lt;/h2&gt;&#10;        &lt;h2 v-else-if='score&gt;=70'&gt; 中等&lt;/h2&gt;&#10;        &lt;h2 v-else-if='score&gt;=60'&gt;及格&lt;/h2&gt;&#10;        &lt;h2 v-else&gt;不及格&lt;/h2&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    userName: '张三',&#10;                    age: 18,&#10;                    money: 0,&#10;                    score: 98&#10;                };&#10;            },&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;后面我们会讲到生命周期，这个时候我们再来看v-show和v-if的区别">
    </outline>
    <outline text="4.8、v-for" _note="列表渲染，学完这个之后就可以把template模板引擎丢掉了&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;h2&gt;列表渲染&lt;/h2&gt;&#10;        &lt;h3 v-for=&quot;(item,index) in stuList&quot; :key=&quot;index&quot;&gt;{{item}}---{{index}}&lt;/h3&gt;&#10;        &lt;hr&gt;&#10;        &lt;h3 v-for=&quot;(item,index) in Array.from(teachers)&quot;&gt;{{item}}&lt;/h3&gt;&#10;        &lt;hr&gt;&#10;        &lt;h3 v-for=&quot;(item,index) in obj&quot;&gt;{{item}}-{{index}}&lt;/h3&gt;&#10;        &lt;hr&gt;&#10;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    stuList: [&quot;张三&quot;, &quot;李四&quot;, '王五', &quot;赵六&quot;],&#10;                    teachers: new Set(['哈哈', '呵呵', '嘻嘻']),&#10;                    obj: {&#10;                        0: 'abc',&#10;                        1: '123',&#10;                        2: 'def'&#10;                    },&#10;                    obj2: {&#10;                        userName: '小白',&#10;                        sex: '女'&#10;                    }&#10;                };&#10;            },&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;除了渲染数组之外 ，还可以列表渲染对象&#10;&#10;现在我们想要实现一个**数据筛选**，只**渲染筛选**的结果，以前我们可以同for循环内嵌if判断的方式可以完成，而现在在vue中正好也有v-for和v-if能够实现相应效果，所以我们可以两者搭配使用&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;h2&gt;列表渲染&lt;/h2&gt;&#10;        &lt;ul&gt;&#10;            &lt;!-- &lt;template v-for=&quot;(item,index) in stuList&quot;&gt;&#10;                &lt;li v-if=&quot;index%2==0&quot;&gt;{{item}}---{{index}}&lt;/li&gt;&#10;            &lt;/template&gt; --&gt;&#10;            &lt;li v-for=&quot;(item,index) in stuList&quot; v-if=&quot;index%2==0&quot;&gt;{{item}}---{{index}}&lt;/li&gt;&#10;        &lt;/ul&gt;&#10;&#10;        &lt;hr&gt;&#10;        &lt;h2 v-for=&quot;(item,index) in 4&quot;&gt;{{item}}---{{index}}&lt;/h2&gt;&#10;        &lt;!-- item从1开始，index从0开始 --&gt;&#10;        &lt;hr&gt;&#10;        &lt;h2 v-for=&quot;({userName,age},index) in stuObj&quot;&gt;&lt;/h2&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    stuList: [&quot;张三&quot;, &quot;李四&quot;, '王五', &quot;赵六&quot;],&#10;                    stuObj: [&#10;                        {&#10;&#10;                        },&#10;                        {&#10;&#10;                        },&#10;                        {&#10;&#10;                        }&#10;                    ]&#10;                };&#10;            },&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 这里要注意：&#10;&gt;&#10;&gt; v-for和v-if是可以写在一个元素上，但是访问不到index的这个值，需要通过template再去包裹一层&#10;&gt;&#10;&gt; **v-for和v-if的优先级不明确**&#10;&#10;如果v-if和v-for放一个元素上使用&#10;&#10;``` html&#10;   &lt;li v-for=&quot;(item,index) in stuList&quot; v-if=&quot;index%2==0&quot;&gt;{{item}}---{{index}}&lt;/li&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 这里我们会发现，第二个列表在渲染的时候会报警告信息&#10;&gt;&#10;&gt; ``` cmd&#10;&gt; Property &quot;index&quot; was accessed during render but is not defined on instance.&#10;&gt; ```&#10;&gt;&#10;&gt; 原理是因为v-if的优先级比v-for要高一些，当这两个指令在同一个元素上面的时候，它会先执行v-if，再去执行v-for&#10;&gt;&#10;&gt; 在上的代码中，当我们执行v-if的时候，里面的条件中的index，这个时候还没有被v-for执行出来，所以index不存在，这个时候就会报警告&#10;&gt;&#10;&gt; 在vue3中v-for可以遍历的不一定非要是数组，还可以是对象&#10;&gt;&#10;&gt; v-for还可以执行普通的for循环&#10;&gt;&#10;&gt; ``` html&#10;&gt; &lt;h2 v-for=&quot;(item,index) in 10&quot;&gt;{{item}}---{{index}}&lt;/h2&gt;&#10;&gt; &lt;!-- item从1开始，index从0开始 --&gt;&#10;&gt; ```&#10;&gt;&#10;&gt; v-for正在执行遍历的时候可以直接解构&#10;&gt;&#10;&gt; ``` html&#10;&gt; &lt;h2 v-for=&quot;({userName,age},index) in stuObj&quot;&gt;&lt;/h2&gt;&#10;&gt;&#10;&gt;&#10;&gt;&#10;&gt;&#10;&gt; &lt;script&gt;&#10;&gt;      Vue.createApp({&#10;&gt;          //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;&gt;          data() {&#10;&gt;              //data这里return返回的对象里面就是页面接管区域的数据来源&#10;&gt;              return {&#10;&gt;                  stuList: [&quot;张三&quot;, &quot;李四&quot;, '王五', &quot;赵六&quot;],&#10;&gt;                  stuObj: [&#10;&gt;                      {&#10;&gt;                          userName: &quot;张三&quot;,&#10;&gt;                          age: 20&#10;&gt;                      },&#10;&gt;                      {&#10;&gt;                          userName: &quot;李四&quot;,&#10;&gt;                          age: 30&#10;&gt;                      }&#10;&gt;                  ]&#10;&gt;              };&#10;&gt;          },&#10;&gt;      }).mount('#app');&#10;&gt;  &lt;/script&gt;&#10;&gt; ```">
    </outline>
    <outline text="4.9、v-once与v-show的惰性" _note="``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;button @click=&quot;flag=true&quot;&gt;按钮&lt;/button&gt;&#10;        &lt;input type=&quot;text&quot; v-model=&quot;userName&quot;&gt;&#10;        &lt;h2 v-show=&quot;flag&quot;&gt;{{userName}}&lt;/h2&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    userName: &quot;张三&quot;,&#10;                    flag: false&#10;                };&#10;            },&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```">
    </outline>
    <outline text="4.10、v-bind" _note="之前我们学习的所有指令都是让页面上面显示内容，但是如果要对一个html属性进行绑定动态的值，需要使用到&#10;v-bind:属性名 这种方式来完成&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;a v-bind:href=&quot;y&quot;&gt;{{x}}&lt;/a&gt;&#10;        &lt;!-- 简写形式 --&gt;&#10;        &lt;a :href=&quot;y&quot;&gt;{{x}}&lt;/a&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    x: '百度一下',&#10;                    y: 'https://www.baidu.com/'&#10;                };&#10;            },&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;因为属性绑定这种操作后期会经常使用，所以vue提供了一种简写的方法&#10;&#10;``` html&#10;&lt;a :href=&quot;y&quot;&gt;{{x}}&lt;/a&gt;&#10;```">
    </outline>
  </outline>
  <outline text="5、vue的事件及事件对象" _note="vue是数据驱动页面的框架，所以它不仅仅可以接管页面的数据，还可以接管页面的事件">
    <outline text="5.1、vue绑定事件的方式" _note="``` html&#10;&lt;button v-on:click=&quot;&quot;&gt;按钮&lt;/button&gt;&#10;```&#10;&#10;&gt; 上面的代码中，我们可以看到 v-on:事件名 这就是vue的事件绑定&#10;&#10;因为事件的绑定时一个非常常用的操作，所以vue也提供了简写方式&#10;&#10;``` html&#10;&lt;button @click=&quot;&quot;&gt;按钮&lt;/button&gt;&#10;```&#10;&#10;&gt; 简写方式就是 \@事件名">
    </outline>
    <outline text="5.2、以方法的形式接管事件" _note="``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;!-- 这里的事件方法是没有加小括号的，因为它不需要传递实参  --&gt;&#10;        &lt;button @click=&quot;sayHello&quot;&gt;按钮&lt;/button&gt;&#10;        &lt;button @click=&quot;abc(12)&quot;&gt;按钮2&lt;/button&gt;&#10;        &lt;button @click=&quot;aaa&quot;&gt;按钮3变成王五&lt;/button&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    username: '张三',&#10;                    x: '百度一下',&#10;                    y: 'https://www.baidu.com/'&#10;                };&#10;            },&#10;            // 接管页面的事件方法&#10;            methods: {&#10;                aaa() {&#10;                    this.username = '王五';&#10;                },&#10;                sayHello() {&#10;                    console.log('大家好');&#10;                },&#10;                abc(age) {&#10;                    console.log(`今年${age}岁`);&#10;&#10;                }&#10;            }&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 1、data负责接管页面的数据，methods负责接管页面上面的方法&#10;&gt;&#10;&gt; 2、v-on:事件名&#10;&gt; 可以赋值一个函数名，这个函数可以有小括号，也可以没有，如果你需要传递实参就条件小括号，不需要则可以省略">
    </outline>
    <outline text="5.3、以行内的方式接管事件" _note="&gt; 这种写法非常简单，它直接把代码写再事件的属性名里面&#10;&#10;``` html&#10; &lt;button @click=&quot;username='李四'&quot;&gt;按钮3变成李四&lt;/button&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 如果行内的事件要操作vue自身的data里面的数据，不要加this【在vue的托管区域内部是严禁出现this】">
    </outline>
    <outline text="5.4、vue的方法访问vue的数据" _note="&gt; 这里我们先做原理上的简单了解&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;!-- 这里的事件方法是没有加小括号的，因为它不需要传递实参  --&gt;&#10;        &lt;button @click=&quot;sayHello&quot;&gt;按钮&lt;/button&gt;&#10;        &lt;button @click=&quot;abc(12)&quot;&gt;按钮2&lt;/button&gt;&#10;&#10;        &lt;button @click=&quot;username='李四'&quot;&gt;按钮3变成李四&lt;/button&gt;&#10;        &lt;h2&gt;{{username}}&lt;/h2&gt;&#10;        &lt;button @click=&quot;aaa&quot;&gt;按钮3变成王五&lt;/button&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    username: '张三',&#10;                    x: '百度一下',&#10;                    y: 'https://www.baidu.com/'&#10;                };&#10;            },&#10;            // 接管页面的事件方法&#10;            methods: {&#10;                aaa() {&#10;                    //如果在事件方法里面，想拿到自己的data里面的数据，可以直接通过自己的对象来完成&#10;                    //完整写法&#10;&#10;                    console.log(this.$data.username);&#10;                    //通过代理来获取自己对象data中的数据&#10;                    console.log(this.username);&#10;                    //当面试官问你，为什么this.userName可以渠道this.$data.userName的值&#10;                    //因为this指向的vue实例对象是一个proxy代理对象，这个代理对象内部的handler代理方法进行了处理&#10;                    this.username = '王五';&#10;                },&#10;                sayHello() {&#10;                    console.log('大家好');&#10;                },&#10;                abc(age) {&#10;                    console.log(`今年${age}岁`);&#10;                }&#10;            }&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```">
    </outline>
    <outline text="5.5、vue的事件修饰符" _note="&gt; 修饰符：vue中的修饰符主要是用来修饰事件的，让事件有一个更具体的触发条件&#10;&#10;这里我们通过事件对象制作一个阻止事件传播的例子&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;div class=&quot;box&quot; @click=&quot;aaa&quot;&gt;&#10;            &lt;!-- 阻止bbb事件冒泡 --&gt;&#10;            &lt;button @click.stop=&quot;bbb($event)&quot;&gt;按钮&lt;/button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    username: '张三',&#10;                    x: '百度一下',&#10;                    y: 'https://www.baidu.com/'&#10;                };&#10;            },&#10;            // 接管页面的事件方法&#10;            methods: {&#10;                aaa() {&#10;                    console.log('我是aaa方法');&#10;                },&#10;                bbb(event) {&#10;                    console.log('我是bbb方法');&#10;                    console.log(event);&#10;                    // event.stopPropagation();&#10;                }&#10;            }&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 上面我们使用事件对象中的 stopPropagation() 来阻止了事件的传播&#10;&#10;但是在vue中要实现阻止事件传播就非常简单&#10;&#10;``` html&#10; &lt;div class=&quot;box&quot; @click=&quot;aaa&quot;&gt;&#10;        &lt;!-- 阻止bbb事件冒泡 --&gt;&#10;        &lt;button @click.stop=&quot;bbb($event)&quot;&gt;按钮&lt;/button&gt;&#10;&lt;/div&gt;&#10;```&#10;&#10;上面的 \@click.stop&#10;就是使用了vue的事件修饰符，stop的修饰符就是阻止事件冒泡，与之相似的修饰符非常多，列举一下&#10;&#10;**事件修饰符**&#10;&#10;-   stop&#10;&#10;-   prevent&#10;&#10;-   self&#10;&#10;-   capture&#10;&#10;-   once&#10;&#10;-   passive&#10;&#10;**按键修饰符**&#10;&#10;vue为一些常用的按钮提供了别名：&#10;&#10;-   enter&#10;&#10;-   tab&#10;&#10;-   delete (捕获delete和backspace两个案件)&#10;&#10;-   esc&#10;&#10;-   space&#10;&#10;-   up&#10;&#10;-   down&#10;&#10;-   left&#10;&#10;-   right&#10;&#10;举例：&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;!-- 在输入框里面输入内容以后，回车，把输入的内容添加到一个列表中 --&gt;&#10;        &lt;input type=&quot;text&quot; v-model.trim=&quot;txt&quot; @keyup.enter=&quot;stuList.add(txt)&quot;&gt;&#10;        &lt;hr&gt;&#10;        &lt;ul&gt;&#10;            &lt;!-- 当我们双击某一个列表项的时候，把该项删除 --&gt;&#10;            &lt;li v-for=&quot;(item,index) in stuList&quot; :key=&quot;index&quot; @dblclick=&quot;stuList.delete(item)&quot;&gt;{{item}}---{{index}}&lt;/li&gt;&#10;        &lt;/ul&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    txt: '',&#10;                    stuList: new Set(['张三', '李四'])&#10;                };&#10;            },&#10;            // 接管页面的事件方法&#10;            methods: {&#10;                aaa() {&#10;                    console.log('我是aaa方法');&#10;                },&#10;                bbb(event) {&#10;                    console.log('我是bbb方法');&#10;                    console.log(event);&#10;                    // event.stopPropagation();&#10;                }&#10;            }&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```">
    </outline>
  </outline>
  <outline text="6、关于数据无法实现相应的问题" _note="**在vue2中**，会存在一个问题，通过方法执行新增的数据无法实现响应，为了解决这个问题，vue2推出了\$set方法来实现&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;h2&gt;{{userInfo.userName}}&lt;/h2&gt;&#10;        &lt;h2&gt;{{userInfo.sex}}&lt;/h2&gt;&#10;        &lt;button @click=&quot;aaa&quot;&gt;添加对象属性&lt;/button&gt;&#10;        &lt;button @click=&quot;bbb&quot;&gt;添加对象属性1&lt;/button&gt;&#10;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue2.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        var app = new Vue({&#10;            el: '#app',&#10;            data: {&#10;                userInfo: {&#10;                    userName: '张三'&#10;                }&#10;            },&#10;            methods: {&#10;                aaa() {&#10;                    //第一种方式&#10;                    this.userInfo.sex = '男';&#10;                    //强制更新，强制重新渲染页面，这个非常消耗性能&#10;                    this.$forceUpdate();&#10;                },&#10;                bbb() {&#10;                    //第二种方式&#10;                    // 使用Vue的$set方法，将userInfo对象的sex属性设置为'男'&#10;                    //vue2  访问器属性&#10;                    this.$set(this.userInfo, 'sex', '男');&#10;                    //可以解决新增属性不能响应的问题&#10;                    // this.$delete();&#10;                }&#10;            },&#10;        })&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; **注意：上面的代码实现是基于vue2的版本框架与vue3无关**&#10;&gt;&#10;&gt; 在上面的代码中，我们可以看到，在最开始渲染的时候，userInfo这个对象里面并没有sex属性，但是后面我们主动追加了这个属性，结果，页面并没有正常显示这个属性，因为vue2对于新增的属性并没有实现响应&#10;&gt;&#10;&gt; 如果要结果这个问题可以使用下面2个方法&#10;&gt;&#10;&gt; 1、this.\$forceUpdate() 强制更新vue状态，但是会非常消耗浏览器性能&#10;&gt;&#10;&gt; 2、this.\$set(）来扩展新属性，这个扩展出来的新属性就是响应式的&#10;&gt;&#10;&gt; #### 同理还有一个\$delete用来在删除data中的属性时实现响应式 {#同理还有一个$delete用来在删除data中的属性时实现响应式}&#10;&gt;&#10;&gt; ``` html&#10;&gt; &lt;!DOCTYPE html&gt;&#10;&gt; &lt;html lang=&quot;en&quot;&gt;&#10;&gt;&#10;&gt; &lt;head&gt;&#10;&gt; &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;&gt; &lt;title&gt;Document&lt;/title&gt;&#10;&gt; &lt;/head&gt;&#10;&gt;&#10;&gt; &lt;body&gt;&#10;&gt; &lt;div id=&quot;app&quot;&gt;&#10;&gt; &lt;h2 v-show=&quot;!userInfo.flag&quot;&gt;{{userInfo.userName}}&lt;/h2&gt;&#10;&gt; &lt;h2&gt;{{userInfo.sex}}&lt;/h2&gt;&#10;&gt; &lt;button @click=&quot;aaa&quot;&gt;删除对象属性&lt;/button&gt;&#10;&gt; &lt;button @click=&quot;bbb&quot;&gt;删除对象属性1&lt;/button&gt;&#10;&gt;&#10;&gt; &lt;/div&gt;&#10;&gt; &lt;script src=&quot;./js/vue2.js&quot;&gt;&lt;/script&gt;&#10;&gt; &lt;script&gt;&#10;&gt; var app = new Vue({&#10;&gt;    el: '#app',&#10;&gt;    data: {&#10;&gt;        userInfo: {&#10;&gt;            userName: '张三',&#10;&gt;            flag: true&#10;&gt;        }&#10;&gt;    },&#10;&gt;    methods: {&#10;&gt;        aaa() {&#10;&gt;            delete this.userInfo.flag;&#10;&gt;            this.$forceUpdate();&#10;&gt;        },&#10;&gt;        bbb() {&#10;&gt;            //第二种方式&#10;&gt;            // 使用Vue的$set方法，将userInfo对象的sex属性设置为'男'&#10;&gt;            //vue2  访问器属性&#10;&gt;            this.$delete(this.userInfo, 'flag');&#10;&gt;            //可以解决新增属性不能响应的问题&#10;&gt;            // this.$delete();&#10;&gt;        }&#10;&gt;    },&#10;&gt; })&#10;&gt; &lt;/script&gt;&#10;&gt; &lt;/body&gt;&#10;&gt;&#10;&gt; &lt;/html&gt;&#10;&gt; ```&#10;&gt;&#10;&gt; ### 注意：&#10;&gt;&#10;&gt; 针对\$set和\$delete新增和删除实现响应式的情况，主要出现在vue2当中，在&#10;&gt;&#10;&gt; **vue3中该问题已经被解决，通过字面量对象的新增和删除操作就可以直接实现**&#10;&gt; **响应式的结果**">
  </outline>
  <outline text="7、vue的计算属性" _note="之前我们讲过，vue是数据驱动页面，它的数据主要来源data这个选项，那么，这里我们做一个扩展，在接管区域内的数据不一定只来源于data，还可以是其他地方&#10;&#10;计算属性是需要计算以后才会得到的，比如&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;!-- 阻止bbb事件冒泡 --&gt;&#10;&#10;        &lt;h2&gt;男生数：{{boyCount}}&lt;/h2&gt;&#10;        &lt;h2&gt;女生数：{{girlCount}}&lt;/h2&gt;&#10;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    username: '张三',&#10;                    stuList: [&#10;                        {&#10;                            stuName: '小白',&#10;                            sex: '女'&#10;                        },&#10;                        {&#10;                            stuName: '小红',&#10;                            sex: '男'&#10;                        },&#10;                        {&#10;                            stuName: '小蓝',&#10;                            sex: '女'&#10;                        },&#10;                        {&#10;                            stuName: '小紫',&#10;                            sex: '女'&#10;                        },&#10;                        {&#10;                            stuName: '小黑',&#10;                            sex: '女'&#10;                        },&#10;                        {&#10;                            stuName: '小绿',&#10;                            sex: '男'&#10;                        },&#10;                    ]&#10;&#10;                };&#10;            },&#10;            // 接管页面的事件方法&#10;            methods: {&#10;                aaa() {&#10;                    console.log('我是aaa方法');&#10;                },&#10;                bbb(event) {&#10;                    console.log('我是bbb方法');&#10;                    console.log(event);&#10;                    // event.stopPropagation();&#10;                }&#10;            },&#10;            computed: {&#10;                boyCount() {&#10;                    let count = this.stuList.filter(item =&gt;&#10;                        item.sex == '男'&#10;                    ).length;&#10;                    return count;&#10;                },&#10;                girlCount() {&#10;                    let count = this.stuList.filter(item =&gt;&#10;                        item.sex == '女'&#10;                    ).length;&#10;                    return count;&#10;                },&#10;            }&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 在上面的代码，我们现在想得到男或女一共多少人，在上面代码中提供的数据里面是没有直接表示的，所以，如果想实现这个需求，就必须要将data中的属性进行计算之后才能得到结果，那么这个计算过程的实现，在vue中可以通过计算属性来实现">
  </outline>
  <outline text="8、vue监听器（数据监听）">
    <outline text="8.1、普通监听" _note="普通监听主要应用在原始数据类型的监听&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;h2&gt;{{userName}}&lt;/h2&gt;&#10;        &lt;button @click=&quot;userName ='李四'&quot;&gt;按钮&lt;/button&gt;&#10;&#10;        &lt;hr&gt;&#10;        &lt;h2&gt;{{userInfo.userAge}}&lt;/h2&gt;&#10;        &lt;button @click=&quot;userInfo.userAge = 30&quot;&gt;按钮&lt;/button&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    userName: '张三',&#10;                    userInfo: {&#10;                        userAge: 20&#10;                    }&#10;                };&#10;            },&#10;            watch: {&#10;                // 你要监听谁，这里的就写一个同名的函数&#10;                userName(newValue, oldValue) {&#10;                    //该方法会接收两个实参，分别是newValue修改之后的值，oldValue修改之前的值&#10;                    console.log(newValue, oldValue);&#10;                },&#10;                //  深度监听&#10;                userInfo: {&#10;                    deep: true,&#10;                    //当数据发生变化之后的后续操作由handler方法来接管&#10;                    handler(newValue) {&#10;                        console.log(newValue);&#10;                    }&#10;                }&#10;            }&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 监听器就是在watch选项下的一个函数，如果要监听某一个数据，就写这个数据同名的函数即可，当这个数据发生变化的时候会自动调用这个函数，同时这个函数会有两个参数，第一个参数代表变化之后的值，第二个参数表示变化之前的值">
    </outline>
    <outline text="8.2、深度监听" _note="在监听器里面，默认情况下，它只能监听原始数据类型，对于数据集合（对象）是监听不到它的变化的，如果想实现对对象的而监听，应该使用深度监听&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;h2&gt;{{userName}}&lt;/h2&gt;&#10;        &lt;button @click=&quot;userName ='李四'&quot;&gt;按钮&lt;/button&gt;&#10;&#10;        &lt;hr&gt;&#10;        &lt;h2&gt;{{userInfo.userAge}}&lt;/h2&gt;&#10;        &lt;button @click=&quot;userInfo.userAge = 30&quot;&gt;按钮&lt;/button&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    userName: '张三',&#10;                    userInfo: {&#10;                        userAge: 20&#10;                    }&#10;                };&#10;            },&#10;            watch: {&#10;                //  深度监听&#10;                userInfo: {&#10;                    deep: true,&#10;                    //当数据发生变化之后的后续操作由handler方法来接管&#10;                    handler(newValue) {&#10;                        console.log(newValue);&#10;                    }&#10;                }&#10;            }&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 上面的userInfo就是实现了深度监听，深度监听不仅仅是一个单独的函数了，它是一个对象，这个对象上面有一个deep属性，使用设置是否处于深度监听的状态，还有一个handler方法是监听到变化之后的后续处理函数">
    </outline>
  </outline>
  <outline text="9、购物车综合案例" _note="``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;    &lt;style&gt;&#10;        .page-title {&#10;            text-align: center;&#10;        }&#10;&#10;        .table1 {&#10;            width: 1200px;&#10;            margin: 0 auto;&#10;            border: 1px solid #000;&#10;            border-collapse: collapse;&#10;        }&#10;&#10;        .table1 :is(td, th) {&#10;            /* 设置表格单元格和表头单元格的边框为1像素的实线，颜色为黑色 */&#10;            border: 1px dotted #000;&#10;            height: 35px;&#10;            padding: 5px;&#10;        }&#10;&#10;        .total-info {&#10;            width: 1200px;&#10;            font-weight: bold;&#10;            font-size: 22px;&#10;            margin: 0 auto;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;h2 class=&quot;page-title&quot;&gt;购物车列表&lt;/h2&gt;&#10;        &lt;table class=&quot;table1&quot;&gt;&#10;            &lt;tr&gt;&#10;                &lt;th&gt;序号&lt;/th&gt;&#10;                &lt;th&gt;商品名称&lt;/th&gt;&#10;                &lt;th&gt;价格&lt;/th&gt;&#10;                &lt;th&gt;数量&lt;/th&gt;&#10;                &lt;th&gt;价格&lt;/th&gt;&#10;            &lt;/tr&gt;&#10;            &lt;tr v-for=&quot;(item,index) in goodsList&quot; :key=&quot;index&quot;&gt;&#10;                &lt;td&gt;{{index+1}}&lt;/td&gt;&#10;                &lt;td&gt;{{item.goodsName}}&lt;/td&gt;&#10;                &lt;td&gt;{{item.price}}&lt;/td&gt;&#10;                &lt;td&gt;&#10;                    &lt;button @click=&quot;item.count--&quot; :disabled=&quot;item.count&lt;=0&quot;&gt;-&lt;/button&gt;&#10;                    {{item.count}}&#10;                    &lt;button @click=&quot;item.count++&quot; :disabled=&quot;item.count&gt;=99&quot;&gt;+&lt;/button&gt;&#10;&#10;                &lt;/td&gt;&#10;                &lt;td&gt;{{item.price *item.count}}&lt;/td&gt;&#10;            &lt;/tr&gt;&#10;&#10;&#10;        &lt;/table&gt;&#10;        &lt;div class=&quot;total-info&quot;&gt;商品总数:{{totalInfo.totalCount}}件,商品总额:{{totalInfo.totalMoney}}&lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    goodsList: [&#10;                        {&#10;                            goodsName: 'iphone 15',&#10;                            price: 5000,&#10;                            count: 1&#10;                        },&#10;                        {&#10;                            goodsName: '充电宝',&#10;                            price: 130,&#10;                            count: 3&#10;                        },&#10;                        {&#10;                            goodsName: '笔记本电脑',&#10;                            price: 7000,&#10;                            count: 2&#10;                        },&#10;                        {&#10;                            goodsName: '数据线',&#10;                            price: 30,&#10;                            count: 5&#10;                        },&#10;                    ]&#10;                };&#10;            },&#10;            computed: {&#10;                totalInfo() {&#10;                    // 一次性得到totalCount和totalMoney&#10;                    let totalCount = 0;&#10;                    let totalMoney = 0;&#10;                    this.goodsList.forEach(({ price, count }) =&gt; {&#10;                        totalCount += count;&#10;                        totalMoney += count * price;&#10;                    });&#10;                    return {&#10;                        totalCount,&#10;                        totalMoney&#10;                    };&#10;                }&#10;            },&#10;            watch: {&#10;&#10;            }&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```">
  </outline>
  <outline text="10、vue样式的class绑定" _note="为什么需要样式绑定？&#10;&#10;在以前的DOM开发里面，如果我们要动态的切换页面元素的样式，需要动态的去设置classList或者style，这样操作很麻烦，举例：&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;    &lt;style&gt;&#10;        .ul1 li {&#10;            list-style: 40px;&#10;            border: 1px solid #000;&#10;        }&#10;&#10;        /* -- 选择器，选择类名为ul1的元素下的li元素，且li元素具有active类  */&#10;        .ul1 li.active {&#10;            background-color: red;&#10;            font-weight: bold;&#10;        }&#10;&#10;        .box {&#10;            width: 200px;&#10;            height: 200px;&#10;            border: 2px solid #000;&#10;        }&#10;&#10;        .box.active {&#10;            background-color: greenyellow;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;&#10;    &lt;ul class=&quot;ul1&quot;&gt;&#10;        &lt;li&gt;第1项&lt;/li&gt;&#10;        &lt;li&gt;第2项&lt;/li&gt;&#10;        &lt;li&gt;第3项&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;    &lt;script&gt;&#10;        let ul1 = document.querySelector('.ul1');&#10;        ul1.addEventListener('click', function (event) {&#10;            if (event.target.matches('li')) {&#10;                let activeElement = document.querySelector('.ul1&gt;li.active');&#10;                if (activeElement) {&#10;                    activeElement.classList.remove('active');&#10;                }&#10;                event.target.classList.add('active');&#10;            }&#10;        })&#10;&#10;    &lt;/script&gt;&#10;    &lt;!-- 原生写法  ----------------end----------------- --&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：\&#10;&gt; 上面的代码就是当我们点击某一项li的时候，会给它添加一个样式，其他的样式则移除，这种效果在原始的DOM操作下会非常麻烦，因为每次操作都要去查找DOM元素，所以它的开发效率是很低下的\&#10;&gt; 现在的vue开发中，因为不再需要纯粹的依赖于DOM操作，所以可以使用vue里面的数据驱动页面的思路来可完成\&#10;&gt; **如果想改变页面，则应该是改变数据，vue的数据是双向绑定的数据，数据改变页面改变，页面改变数据改变**">
    <outline text="10.1、对象语法" _note="它的语法格式如下&#10;&#10;``` html&#10;&lt;div :class=&quot;{类名:布尔值,类名:布尔值}&quot;&gt;&lt;/div&gt;&#10;```&#10;&#10;如果布尔的结果为true，则当前样式生效，反之&#10;&#10;``` html&#10;&lt;div class=&quot;box&quot; :class=&quot;{active:true}&quot;&gt;&lt;/div&gt;&#10;```&#10;&#10;上面的代码里面，因为active的样式后面的值是一个true，那么，我们就可以认为这个样式生效了&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;    &lt;style&gt;&#10;        .ul1 li {&#10;            list-style: 40px;&#10;            border: 1px solid #000;&#10;        }&#10;&#10;        /* -- 选择器，选择类名为ul1的元素下的li元素，且li元素具有active类  */&#10;        .ul1 li.active {&#10;            background-color: red;&#10;            font-weight: bold;&#10;        }&#10;&#10;        .box {&#10;            width: 200px;&#10;            height: 200px;&#10;            border: 2px solid #000;&#10;        }&#10;&#10;        .box.active {&#10;            background-color: greenyellow;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;div class=&quot;box&quot; :class=&quot;{active:flag}&quot; @click=&quot;flag=!flag&quot;&gt;&#10;            这是一个盒子&#10;        &lt;/div&gt;&#10;&#10;        &lt;ul class=&quot;ul1&quot;&gt;&#10;            &lt;li v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot; :class=&quot;{active:currentIndex == index}&quot;&#10;                @click=&quot;currentIndex=index&quot;&gt;{{item}}&lt;/li&gt;&#10;&#10;        &lt;/ul&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    flag: false,&#10;                    list: ['第1项', '第2项', '第3项'],&#10;                    currentIndex: -1&#10;                };&#10;            },&#10;            watch: {&#10;                // 你要监听谁，这里的就写一个同名的函数&#10;                userName(newValue, oldValue) {&#10;                    //该方法会接收两个实参，分别是newValue修改之后的值，oldValue修改之前的值&#10;                    console.log(newValue, oldValue);&#10;                },&#10;                //  深度监听&#10;                userInfo: {&#10;                    deep: true,&#10;                    //当数据发生变化之后的后续操作由handler方法来接管&#10;                    handler(newValue) {&#10;                        console.log(newValue);&#10;                    }&#10;                }&#10;            }&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：\&#10;&gt; 在上面的代码中，我们可以看到active的样式是否生效主要看后面的flag变化，这个数据值默认是false，然后我们在当前元素的上面添加了click事件，并设置了&#10;&gt; flag = !flag ，这样flag的值就会在true / false&#10;&gt; 之间来回切换，那么就实现了active样式的切换&#10;&#10;现在我们在来通过vue来上面原生操作DOM的例子 上面便是例子">
    </outline>
    <outline text="10.2、数组语法" _note="它的语法格式如下：&#10;&#10;``` html&#10;&lt;div :Class=&quot;[条件1?'类名1':'类名2',条件2?'类名3':'类名4']&quot;&gt;&lt;/div&gt;&#10;```&#10;&#10;数组语法每一个数组元素就是一个判断条件，根据判断结果来决定给哪个类名&#10;&#10;``` html&#10;&lt;div :Class=&quot;[条件1?'active':null]&quot;&gt;&lt;/div&gt;&#10;```&#10;&#10;举例：&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;    &lt;style&gt;&#10;        .box {&#10;            width: 200px;&#10;            height: 200px;&#10;            border: 2px solid #000;&#10;            display: flex;&#10;            justify-content: center;&#10;            align-items: center;&#10;        }&#10;&#10;        .active {&#10;            background-color: pink;&#10;        }&#10;&#10;        .unactive {&#10;            background-color: lightgreen;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;div class=&quot;box&quot; :class=&quot;[age&gt;18 ?'active':'unactive']&quot;&gt;&#10;            &lt;button @click=&quot;age++&quot;&gt;按钮&lt;/button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    age: 17&#10;                };&#10;            },&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：\&#10;&gt; 上面的代码中，我们使用&#10;&gt; :`class=&quot;[age&gt;18?'active':'unactive']&quot;`去完成了动态样式的切换">
    </outline>
  </outline>
  <outline text="11、vue样式的style绑定" _note="有了class的动态绑定之后，为什么还需要style绑定，**因为style属性直接操作样式，不需要单独去写一个类，有时候会比较方便**">
    <outline text="11.1、对象语法" _note="``` html&#10;&lt;div :style=&quot;{属性名:数据值,属性名:数据值}&quot;&gt;&lt;/div&gt;&#10;```&#10;&#10;举例：&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;    &lt;style&gt;&#10;        .box {&#10;            width: 200px;&#10;            height: 200px;&#10;            border: 2px solid #000;&#10;            display: flex;&#10;            justify-content: center;&#10;            align-items: center;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;div class=&quot;box&quot; :style=&quot;{backgroundColor:color}&quot;&gt;&#10;            &lt;button @click=&quot;color='black'&quot;&gt;黑色&lt;/button&gt;&#10;            &lt;button @click=&quot;color='red'&quot;&gt;红色&lt;/button&gt;&#10;            &lt;button @click=&quot;color='blue'&quot;&gt;蓝色&lt;/button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管 了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    color: 'white'&#10;                };&#10;            },&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;综合案例：手动进度条&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;    &lt;style&gt;&#10;        .progress {&#10;            width: 400px;&#10;            height: 30px;&#10;            border: 1px solid #ccc;&#10;            background-image: linear-gradient(to right, red, red);&#10;            display: flex;&#10;            background-repeat: no-repeat;&#10;            justify-content: center;&#10;            align-items: center;&#10;            border-radius: 15px;&#10;        }&#10;&#10;        span.active {&#10;            color: white;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;div class=&quot;progress&quot; :style=&quot;{backgroundSize:`${precentage}% 100%`}&quot;&gt;&#10;            &lt;span :class=&quot;{active:precentage&gt;55}&quot;&gt;{{precentage}}%&lt;/span&gt;&#10;        &lt;/div&gt;&#10;        &lt;hr&gt;&#10;        &lt;button @click=&quot;precentage--&quot; :disabled=&quot;precentage&lt;=0&quot;&gt;-&lt;/button&gt;&#10;        &lt;button @click=&quot;precentage++&quot; :disabled=&quot;precentage&gt;=100&quot;&gt;+&lt;/button&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管 了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    precentage: 50&#10;                };&#10;            },&#10;            watch: {&#10;                precentage(newValue, oldValue) {&#10;                    if (newValue &gt; 100) {&#10;                        this.precentage = 100;&#10;                    }&#10;                }&#10;            }&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```">
    </outline>
    <outline text="11.2、数组语法" _note="``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;    &lt;style&gt;&#10;        .box {&#10;            width: 100px;&#10;            height: 100px;&#10;            border: 1px solid #000;&#10;            display: flex;&#10;            justify-content: center;&#10;            align-items: center;&#10;            transition: all 0.3s ease-out;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;!--id为app的元素就是vue的管理区域--&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;div class=&quot;box&quot; :style=&quot;[1&lt; 2 ? obj1:null,obj2]&quot;&gt;&#10;            33333&lt;/div&gt;&#10;        &lt;button @click=&quot;change&quot;&gt;修改样式&lt;/button&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;            //  vue接管 了#app的区域 在该区域内所有的操作都由vue来执行&#10;            data() {&#10;                //data这里return返回的对象里面就是页面接管区域的数据来源&#10;                return {&#10;                    obj1: {&#10;                        backgroundColor: 'red',&#10;                        borderRadius: '50%'&#10;                    },&#10;                    obj2: {&#10;&#10;                    }&#10;                };&#10;            },&#10;            methods: {&#10;                change() {&#10;                    this.obj1.width = '200px';&#10;                    this.obj1.height = '200px';&#10;                    this.obj2.transform = 'rotateZ(45deg)';&#10;                }&#10;            },&#10;        }).mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```">
    </outline>
  </outline>
  <outline text="12、vue过滤器" _note="&gt; vue3已经废弃，但是在vue2中还是会被经常用到&#10;&#10;在vue2中，过滤器就是数据格式化工具，或者数据需要二次处理的时候会作用到它">
    <outline text="12.1、全局过滤器" _note="故名思意就是可以在全局使用的，它的语法格式如下&#10;&#10;``` javascript&#10;Vue.filter(&quot;过滤器名称&quot;,function(参数){&#10;    //这里的第一个参数就是要格式化处理的数据&#10;    //过滤器函数必须要有一个返回值&#10;})&#10;```&#10;&#10;在使用过滤器的时候如下&#10;&#10;``` html&#10;&lt;div&gt;{{content | 过滤器}}&lt;/div&gt;&#10;```&#10;&#10;举例：时间数据格式化处理&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;h2 v-for=&quot;(item,index) in list&quot;&gt;&#10;            {{item | formatDateTime}}&#10;        &lt;/h2&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue2.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        //编写一个过滤器&#10;        Vue.filter(&quot;formatDateTime&quot;, function (d) {&#10;            let _d = new Date(d);&#10;            let year = _d.getFullYear();&#10;            let month = _d.getMonth() + 1;&#10;            let day = _d.getDate();&#10;            let hour = _d.getHours();&#10;            let second = _d.getSeconds();&#10;            let minute = _d.getMinutes();&#10;            // return `${year}.${month}.${day} - ${hour}:${minute}:${second}`;&#10;            return [year, month, day].join('-') + ' ' + [hour, minute, second].join(':');&#10;        });&#10;        var app = new Vue({&#10;            el: '#app',&#10;            data: {&#10;&#10;                list: [&#10;                    new Date(),&#10;                    12567385127835,&#10;                    '2021.09.09 12:12:12'&#10;                ]&#10;&#10;            },&#10;            filters: {&#10;&#10;            },&#10;            methods: {&#10;                aaa() {&#10;                    delete this.userInfo.flag;&#10;                    this.$forceUpdate();&#10;                },&#10;                bbb() {&#10;                    //第二种方式&#10;                    // 使用Vue的$set方法，将userInfo对象的sex属性设置为'男'&#10;                    //vue2  访问器属性&#10;                    this.$delete(this.userInfo, 'flag');&#10;                    //可以解决新增属性不能响应的问题&#10;                    // this.$delete();&#10;                }&#10;            },&#10;        })&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```">
    </outline>
    <outline text="12.2、局部过滤器" _note="现在我们制作一个用于文本长度大于规定长度时，把多余部分替换成省略号的局部过滤器&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;div class=&quot;box1&quot;&gt;{{content1 | txt}}&lt;/div&gt;&#10;        &lt;div class=&quot;box2&quot;&gt;{{content2 | txt}}&lt;/div&gt;&#10;        &lt;div class=&quot;box3&quot; v-html=&quot;txt(content2,30)&quot;&gt;&lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue2.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;&#10;        var app = new Vue({&#10;            el: '#app',&#10;            data: {&#10;                content1: '东风汽车旗下高端智慧新能源品牌，东风岚图的最新力作——岚图知音，以及其他10家车企的整车下线将标志2024年中国新能源汽车1000万辆正式达成。同时，在活动现场，多家民族汽车品牌也将集中亮相，共同奏响2024年中国新能源汽车1000万辆达成的荣耀交响曲。',&#10;                content2: '过去十年，中国新能源汽车产业建立了领先优势，引领全球汽车工业转型潮流。而今，在中国新能源汽车即将达成年度1000万辆的里程碑。'&#10;&#10;            },&#10;            filters: {&#10;                // 编写一个局部过滤器&#10;                txt(str, maxLength = 20) {&#10;                    if (str.length &gt; maxLength) {&#10;                        return str.substr(0, maxLength) + '...';&#10;                    } else {&#10;                        return str;&#10;                    }&#10;                }&#10;            },&#10;            methods: {&#10;                // 编写一个局部过滤器&#10;                txt(str, maxLength = 20) {&#10;                    if (str.length &gt; maxLength) {&#10;                        return str.substr(0, maxLength) + `... &lt;a href='#'&gt;更多&lt;/a&gt;`;&#10;                    } else {&#10;                        return str;&#10;                    }&#10;                }&#10;            },&#10;        })&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;**思考：vue3为什么会废弃过滤器？**&#10;&#10;例子&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;div class=&quot;box1&quot;&gt;{{content1 | txt}}&lt;/div&gt;&#10;        &lt;div class=&quot;box2&quot;&gt;{{content2 | txt}}&lt;/div&gt;&#10;        &lt;div class=&quot;box3&quot; v-html=&quot;txt(content2,30)&quot;&gt;&lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue2.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;&#10;        var app = new Vue({&#10;            el: '#app',&#10;            data: {&#10;                content1: '东风汽车旗下高端智慧新能源品牌，东风岚图的最新力作——岚图知音，以及其他10家车企的整车下线将标志2024年中国新能源汽车1000万辆正式达成。同时，在活动现场，多家民族汽车品牌也将集中亮相，共同奏响2024年中国新能源汽车1000万辆达成的荣耀交响曲。',&#10;                content2: '过去十年，中国新能源汽车产业建立了领先优势，引领全球汽车工业转型潮流。而今，在中国新能源汽车即将达成年度1000万辆的里程碑。'&#10;&#10;            },&#10;            methods: {&#10;                // 编写方法  来代替 一个局部过滤器&#10;                txt(str, maxLength = 20) {&#10;                    if (str.length &gt; maxLength) {&#10;                        return str.substr(0, maxLength) + `... &lt;a href='#'&gt;更多&lt;/a&gt;`;&#10;                    } else {&#10;                        return str;&#10;                    }&#10;                }&#10;            },&#10;        })&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```">
    </outline>
  </outline>
  <outline text="13、vue的DOM操作" _note="在vue框架下面，我们是不推荐做DOM操作的，但是不代表vue不能进行DOM操&#10;&#10;作，它也是完全可以的&#10;&#10;1、最原始的方式就是原生JS中提供的DOM技术，比如document.querySelector()\...\....&#10;&#10;2、可以利用事件对象当中的currentTarget事件绑定者和target事件触发者来获取到一个DOM对象，这个东西有个缺点，只能找到自己或者以自己为中心的元素&#10;&#10;3、vue提供了一个ref属性用来获取DOM，这个是vue推荐方式&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;h2 ref=&quot;abc&quot;&gt;张三&lt;/h2&gt;&#10;        &lt;h3 ref=&quot;abc&quot;&gt;张三&lt;/h3&gt;&#10;        &lt;button @click=&quot;aaa&quot;&gt;anniu&lt;/button&gt;&#10;        &lt;ul&gt;&#10;            &lt;li v-for=&quot;(item,index) in list&quot; ref=&quot;aaa&quot;&gt;{{item}}&lt;/li&gt;&#10;        &lt;/ul&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;./js/vue2.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;&#10;        var app = new Vue({&#10;            el: '#app',&#10;            data: {&#10;                list: ['a', 'b', 'c', 'd']&#10;            },&#10;&#10;            methods: {&#10;                aaa() {&#10;                    // console.log(this.$refs.abc);&#10;                    console.log(this.$refs.aaa);&#10;&#10;                }&#10;            },&#10;        })&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;**ref在使用时需要注意的点：**\&#10;**1、当出现同名的ref时**\&#10;当在vue的挂载区域内出现多个同名的ref的时候，通过\$refs调出来的是最后一个\&#10;**2、当通过v-for渲染出来的标签也带有ref的时候**\&#10;这种通过列表渲染产生的同名ref，在获取时会作为一个数组到，每一个数组元素就对一个ref标记的标签&#10;&#10;&gt; 注意：&#10;&gt;&#10;&gt; 两种情况其实都是针对ref同名的情况下出现的，但是，如果是自己手写的ref同名，只会获取到最后一个，而通过v-for渲染出来的同名，会全部获取到并作为一个数组表示">
  </outline>
</outline>
<outline text="vue组件化开发" _note="现在有一个问题，如下：&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;style&gt;&#10;    .box {&#10;        width: 300px;&#10;        border: 2px solid #000;&#10;        padding: 10px;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;box&quot;&gt;&#10;        &lt;h2&gt;我是标题1&lt;/h2&gt;&#10;        &lt;p&gt;我是内容1&lt;/p&gt;&#10;    &lt;/div&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;&#10;    &lt;/div&gt;&#10;&#10;    &lt;template id=&quot;user-info&quot;&gt;&#10;        &lt;div class=&quot;box&quot;&gt;&#10;            &lt;h2&gt;我是标题1&lt;/h2&gt;&#10;            &lt;p&gt;我是内容1&lt;/p&gt;&#10;        &lt;/div&gt;&#10;    &lt;/template&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        Vue.createApp({&#10;&#10;        }).mount('#app') &#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;当我们在html中需要重复的生成某些东西的时会，会造成大量的代码冗余现在我们要想办法，怎么去简化上面的代码，换句话就是提高代码利用率">
  <outline text="1、虚拟DOM概念" _note="能够简化代码最好的办法就是封装，封装这个概念我们其实一致在践行，比如JS的封装依靠的就是function函数，如果是css的封装我们可以使用到公共样式，但是好像并没有针对HTML的封装&#10;&#10;为了实现一种HTML的封装方式，所以我们提出一个叫做 virtual&#10;DOM的概念，我们可以把要封装的HTML代码当成一个整体的DOM元素来看待&#10;&#10;``` html&#10;&lt;div id=&quot;app&quot;&gt;&#10;    &lt;user-info&gt;&lt;/user-info&gt;&#10;    &lt;user-info&gt;&lt;/user-info&gt;&#10;    &lt;user-info&gt;&lt;/user-info&gt;&#10;&lt;/div&gt;&#10;&lt;template id=&quot;user-info&quot;&gt;&#10;    &lt;div class=&quot;box&quot;&gt;&#10;        &lt;h2&gt;我是标题1&lt;/h2&gt;&#10;        &lt;p&gt;我是内容1&lt;/p&gt;&#10;    &lt;/div&gt;&#10;&lt;/template&gt;&#10;```&#10;&#10;现在我们把需要封装的html代码通过template标签封装一个整体，然后将它转换程一个虚拟标签&#10;`&lt;user-info&gt;&lt;/user-info&gt;`&#10;，最后我们去使用这个标签即可【以上代码是一种思路体现，如果执行浏览器控制台会告诉我们user-info不是一个元素】\&#10;那么针对这个问题，我们可以把user-info制作成一个DOM元素，然后在html调用虚拟DOM\&#10;目前能够实现虚拟DOM的框架如下：&#10;&#10;1、vue&#10;&#10;2、react&#10;&#10;3、angular\&#10;在这三个框架中虚拟DOM都被叫做组件">
  </outline>
  <outline text="2、全局组件" _note="vue3的全局组件和vue2的全局组件方式不太一样，组件也叫component，组件本身可以看做是一个小型的vue实例对象（小型应用实例对象）&#10;&#10;注册全局组件：&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;style&gt;&#10;    .box {&#10;        width: 300px;&#10;        border: 2px solid #000;&#10;        padding: 10px;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;aaa&gt;&lt;/aaa&gt;&#10;        &lt;bbb&gt;&lt;/bbb&gt;&#10;    &lt;/div&gt;&#10;    &lt;template id=&quot;temp1&quot;&gt;&#10;        &lt;div class=&quot;box&quot;&gt;&#10;            &lt;h2&gt;我是box标题1&lt;/h2&gt;&#10;            &lt;p&gt;我是box内容1&lt;/p&gt;&#10;        &lt;/div&gt;&#10;    &lt;/template&gt;&#10;    &lt;template id=&quot;temp2&quot;&gt;&#10;        &lt;h1&gt;我是最大的标题&lt;/h1&gt;&#10;        &lt;aaa&gt;&lt;/aaa&gt;&#10;    &lt;/template&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        const app = Vue.createApp({&#10;&#10;        });&#10;        // 注册全局组件&#10;        app.component('aaa', {&#10;            template: '#temp1'&#10;        });&#10;        app.component('bbb', {&#10;            template: '#temp2'&#10;        });&#10;        app.mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 注意事项：&#10;&gt;&#10;&gt; 在注册全局组件的时候，一定要在挂载之前注册&#10;&gt;&#10;&gt; 全局组件的注册语法格式如下&#10;&gt;&#10;&gt; ``` javascript&#10;&gt; app.component(&quot;组件名&quot;,组件配置对象)&#10;&gt; ```&#10;&gt;&#10;&gt; ### **关于组件的命名**&#10;&gt;&#10;&gt; 当组件被注册成功会有对应的虚拟标签名可以使用，为了区别常规的html标签&#10;&gt;&#10;&gt; 名，虚拟标签名在取名的时，可以采用大驼峰写法&#10;&#10;因为我们现在注册是全局组件，所以可以全局调用，如上面的：">
  </outline>
  <outline text="3、局部组件" _note="局部组件与全局组件在功能上是一样的，只是使用范围有限制而已&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;style&gt;&#10;    .box {&#10;        width: 300px;&#10;        border: 2px solid #000;&#10;        padding: 10px;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;!-- &lt;user-info&gt;&lt;/user-info&gt; --&gt;&#10;        &lt;btn-box&gt;&lt;/btn-box&gt;&#10;        &lt;!-- &lt;input-box&gt;&lt;/input-box&gt; --&gt;&#10;    &lt;/div&gt;&#10;    &lt;template id=&quot;temp1&quot;&gt;&#10;        &lt;div class=&quot;box&quot;&gt;&#10;            &lt;h2&gt;我是一个盒子&lt;/h2&gt;&#10;            &lt;p&gt;马上下班了，很开心&lt;/p&gt;&#10;        &lt;/div&gt;&#10;    &lt;/template&gt;&#10;    &lt;template id=&quot;temp2&quot;&gt;&#10;        &lt;user-info&gt;&lt;/user-info&gt;&#10;        &lt;div class=&quot;btn&quot;&gt;&#10;            &lt;button&gt;登录&lt;/button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/template&gt;&#10;    &lt;template id=&quot;temp3&quot;&gt;&#10;        &lt;div class=&quot;input&quot;&gt;&#10;            &lt;input type=&quot;text&quot;&gt;&#10;        &lt;/div&gt;&#10;        &lt;user-info&gt;&lt;/user-info&gt;&#10;    &lt;/template&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        let UserInfo = {&#10;            template: '#temp1'&#10;        };&#10;        let BtnBox = {&#10;            template: &quot;#temp2&quot;,&#10;            components: {&#10;                UserInfo&#10;            }&#10;        };&#10;        let InputBox = {&#10;            template: &quot;#temp3&quot;,&#10;        };&#10;        const app = Vue.createApp({&#10;            //这里注册局部变量&#10;            components: {&#10;                UserInfo,&#10;                BtnBox,&#10;                InputBox&#10;            }&#10;        });&#10;&#10;        app.mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 局部组件本质上就是一个对象，只是这个对象要注册到某一个组件的内容才可以使用，同时在optionsAPI语法下注册的组件，其组件名在转换成虚拟标签的时候，要改写法&#10;&gt;&#10;&gt; 举例：&#10;&gt;&#10;&gt; 组件名叫做UserInfo，虚拟标签名就为 user-info&#10;&#10;以上的注册虽然是局部组件，但是并没有体现出来局部组件的局部&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 以上代码中，我们创建了3个组件，分别是UserInfo，BtnBox，InputBox，其中UserInfo作为BtnBox的局部组件被注册到BtnBox中并且进行了调用，同时在InputBox我们虽然也调用了UserInfo，但是我们并没有把UserInfo注册成InputBox的局部组件，所以在挂载区域中分别调用btn-box和input-box之后，我们可以看到，在input-box中并没有user-info的标签结构被渲染出来&#10;&gt;&#10;&gt; **注意：**&#10;&gt;&#10;&gt; **组件一定要先注册再使用**">
  </outline>
  <outline text="4、组件中的数据" _note="组件本身就是一个小型的vue，所以它的内部的原理与我们之前所学习的东西是一样的，它的内部也会有data，也会有methods，也会有watch等等&#10;&#10;针对组件内部的数据来源：&#10;&#10;1、组件自身的数据data&#10;&#10;2、外部传入的数据&#10;&#10;3、组件自身的computed&#10;&#10;4、全局数据">
    <outline text="4.1、组件自身的数据" _note="``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;style&gt;&#10;    .box {&#10;        width: 300px;&#10;        border: 2px solid #000;&#10;        padding: 10px;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;aaa msg=&quot;haha&quot;&gt;&lt;/aaa&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 所谓组件自身的数据，可以简单理解就是组件内部data中本身就存在的数据 --&gt;&#10;    &lt;template id=&quot;temp1&quot;&gt;&#10;        &lt;div class=&quot;box&quot;&gt;&#10;            &lt;h2&gt;大家好,我叫{{nickName}}&lt;/h2&gt;&#10;        &lt;/div&gt;&#10;    &lt;/template&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        let aaa = {&#10;            template: '#temp1',&#10;            data() {&#10;                return {&#10;                    nickName: '张三'&#10;                };&#10;            },&#10;            props: {&#10;&#10;            }&#10;        };&#10;        const app = Vue.createApp({&#10;            //这里注册局部变量&#10;            components: {&#10;                aaa&#10;            }&#10;        });&#10;&#10;        app.mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 所谓组件自身的数据，可以简单理解就是组件内部data中本身就存在的数据">
    </outline>
    <outline text="4.2、组件接收的外部数据" _note="其实在大多数的开发场景下，我们可以看到，组件的布局是相同的，但是数据是不一样的&#10;&#10;这种情况下，我们一般都利用父组件将数据通过列表渲染的方式传递给子组件来完成&#10;&#10;组件是可以接受外部传递进入的数据，数据在传递的时候需要使用到**自定义属性传递**&#10;&#10;``` html&#10;&lt;aaa msg=&quot;haha&quot;&gt;&lt;/aaa&gt;&#10;```&#10;&#10;如果我们采用上面的方式来完成，这个时候我们就可以看到组件上有一个msg自定义属性，这个属性的值是&quot;haha&quot;&#10;，在组件内部就可以实现值的接收&#10;&#10;在接收过程中分为数组语法和对象语法两种：&#10;&#10;**1、数组语法**&#10;&#10;``` javascript&#10;let aaa = {&#10;    template:&quot;#temp1&quot;,&#10;    props:[&quot;msg&quot;,&quot;sex&quot;]&#10;}&#10;```&#10;&#10;**2、对象语法**&#10;&#10;``` javascript&#10;let aaa = {&#10;	template:&quot;#temp1&quot;,&#10;	props:{&#10;        msg:{&#10;            type:String,&#10;            required:true&#10;        },&#10;        sex:&#10;            {&#10;                type:String,&#10;                default:&quot;女&quot;	&#10;            }&#10;   	}&#10;}&#10;```&#10;&#10;在使用对象语法接受的时候，我们可以使用一些描述信息，比如**type去制定接受的数据类型**，default指定默认值，比如required指定这个值必须传递进来&#10;&#10;&gt; **关于外部传入数据的注意事项**&#10;&gt;&#10;&gt; 1、关于自定义属性名的设置问题&#10;&gt;&#10;&gt; 当在子组件中设置的props的接收数据的属性名是一个驼峰写法的时候，在作为自定义属性写的时候需要转义，比如：nickName&#10;&gt; \-\-\-\--\&gt; nick-name&#10;&gt;&#10;&gt; 2、关于传递的值的数据类型的问题&#10;&gt;&#10;&gt; 在正常情况下传入组件内部的数据值都是字符串类型的，如果想携带数据类型将值传入，需要在传入的时候使用动态属性绑定的方式传入，比如&#10;&gt;&#10;&gt; ``` html&#10;&gt; &lt;aaa flag=&quot;false&quot;&gt;&lt;/aaa&gt;&#10;&gt; &lt;!-- 上面情况下传入的并不是布尔的false，而是字符串的false --&gt;&#10;&gt; ```&#10;&gt;&#10;&gt; 正确携带数据类型传入的方式如下：&#10;&gt;&#10;&gt; ``` html&#10;&gt; &lt;aaa :flag=&quot;false&quot;&gt;&lt;/aaa&gt;&#10;&gt; &lt;!-- 使用动态属性绑定的方式，将自定义属性做成动态属性，就可以携带数据类型&#10;&gt; 传入 --&gt;&#10;&gt; ```">
    </outline>
    <outline text="4.3、全局数据" _note="全局数据可以解决跨组件调用的问题，比如父级组件传递给孙子组件，比如，兄弟之间相互传递数据，面对这种情况，我们可以使用全局数据完成，目前的全局数据的解决方案有以下几种：&#10;&#10;1、vuex&#10;&#10;2、pinia&#10;&#10;3、vue3自带provide和inject方法">
    </outline>
  </outline>
  <outline text="5、组件的事件与方法" _note="组件本身就是一个小型的vue，所以它的内部一定会有数据和事件，那么有事件就必然也会有方法，所以我们来看下组件内的事件与方法&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;style&gt;&#10;    .box {&#10;        width: 300px;&#10;        border: 2px solid #000;&#10;        padding: 10px;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;h2&gt;aaa组件的外部&lt;/h2&gt;&#10;        &lt;button @click=&quot;m1&quot;&gt;外面按钮&lt;/button&gt;&#10;        &lt;aaa msg=&quot;haha&quot; sex=&quot;怪兽&quot; ref=&quot;aaa&quot;&gt;&lt;/aaa&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 所谓组件自身的数据，可以简单理解就是组件内部data中本身就存在的数据 --&gt;&#10;    &lt;template id=&quot;temp1&quot;&gt;&#10;        &lt;div class=&quot;box&quot;&gt;&#10;            &lt;h2&gt;大家好,我叫{{nickName}}&lt;/h2&gt;&#10;            &lt;h2&gt;{{msg}}---{{sex}}&lt;/h2&gt;&#10;            &lt;button @click=&quot;sayHello&quot;&gt;按钮&lt;/button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/template&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        let aaa = {&#10;            template: '#temp1',&#10;            data() {&#10;                return {&#10;                    nickName: '张三'&#10;                };&#10;            },&#10;            methods: {&#10;                sayHello() {&#10;                    console.log('大家好，我叫' + this.nickName);&#10;&#10;                }&#10;            },&#10;            // 数组语法&#10;            // props: [&quot;msg&quot;, &quot;sex&quot;]&#10;            // 对象语法&#10;            props: {&#10;                msg: {&#10;                    type: String,&#10;                    &lt;!-- 是否必填 --&gt;&#10;                    required: true&#10;                },&#10;                sex: {&#10;                    type: String,&#10;                    default: '男'&#10;                }&#10;            }&#10;        };&#10;        const app = Vue.createApp({&#10;            methods: {&#10;                m1() {&#10;                    // 在这里我们想调用aaa组件内部的sayHello方法&#10;                    this.$refs.aaa.sayHello();&#10;                }&#10;            },&#10;            //这里注册局部变量&#10;            components: {&#10;                aaa&#10;            }&#10;        });&#10;&#10;        app.mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;上面的代码中，我们可以看到，组件内部的事件可以在组件内部处理方法的执行">
    <outline text="5.1、父组件调用子组件的方法" _note="当父组件需要调用 子组件的方法时候，我们可以通过 \$refs&#10;来找到这个组件，只要找到这个组件就可以调用这个子组件内部的方法&#10;&#10;``` html&#10;&lt;aaa nick-name=&quot;大哥哥&quot; ref=&quot;aaa&quot;&gt;&lt;/aaa&gt;&#10;```&#10;&#10;最后在使用的时候，直接通过 `this.$refs.aaa.方法名()`;&#10;就可以调用子组件里面的方法&#10;&#10;``` javascript&#10;methods: {&#10;    m1() {&#10;        // 在这里我们想调用aaa组件内部的sayHello方法&#10;        this.$refs.aaa.sayHello();&#10;    }&#10;},&#10;```">
    </outline>
  </outline>
  <outline text="6、数据流的单向性" _note="数据流的单向性指的是数据只能从外部流向内部，**外部改变了，内部也改变**&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;style&gt;&#10;    .box {&#10;        width: 300px;&#10;        border: 2px solid #000;&#10;        padding: 10px;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;h1&gt;组件外面 -----{{nickName}}&lt;/h1&gt;&#10;        &lt;button @click=&quot;nickName='炎拳'&quot;&gt;按钮&lt;/button&gt;&#10;        &lt;aaa :nick-name=&quot;nickName&quot;&gt;&lt;/aaa&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 所谓组件自身的数据，可以简单理解就是组件内部data中本身就存在的数据 --&gt;&#10;    &lt;template id=&quot;temp1&quot;&gt;&#10;        &lt;div class=&quot;box&quot;&gt;&#10;            &lt;h2&gt;大家好,我叫{{nickName}}&lt;/h2&gt;&#10;&#10;        &lt;/div&gt;&#10;    &lt;/template&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        let aaa = {&#10;            template: '#temp1',&#10;            data() {&#10;                return {&#10;                };&#10;            },&#10;            methods: {&#10;                sayHello() {&#10;                    console.log('大家好，我叫' + this.nickName);&#10;&#10;                }&#10;            },&#10;            // 数组语法&#10;            // props: [&quot;msg&quot;, &quot;sex&quot;]&#10;            // 对象语法&#10;            props: {&#10;                nickName: {&#10;                    type: String,&#10;                },&#10;&#10;            }&#10;        };&#10;        const app = Vue.createApp({&#10;            data() {&#10;                return {&#10;                    nickName: '大哥哥'&#10;                };&#10;            },&#10;            methods: {&#10;&#10;            },&#10;            //这里注册局部变量&#10;            components: {&#10;                aaa&#10;            }&#10;        });&#10;&#10;        app.mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;当我们点击了按钮之后，我们发现外部的数据变了，内部的数据也变化了，这是因为数据是有流行性的，由外向内进行传递，**这个过程不可逆**&#10;&#10;数据流的单向性就注定了只能外边改变，里面再改变，而不能里面改变，外边再改变，当我们尝试这么去做会报错的">
  </outline>
  <outline text="7、破坏数据流的单向性">
    <outline text="7.1、利用对象的堆栈原理" _note="vue中进行组件传递的值的时候，可以使用const锁栈不锁堆的原理，当值接收到之后，不可以再去改动栈里面的内容，但是可以改变堆里面的内容\&#10;同时我们还知道，对象再传递的时候传递的是堆的内存地址（浅拷贝）&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;style&gt;&#10;    .box {&#10;        width: 300px;&#10;        border: 2px solid #000;&#10;        padding: 10px;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;h1&gt;组件外面 -----{{userInfo.nickName}}&lt;/h1&gt;&#10;        &lt;button @click=&quot;nickName='炎拳'&quot;&gt;按钮&lt;/button&gt;&#10;        &lt;aaa :user-info=&quot;userInfo&quot;&gt;&lt;/aaa&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 所谓组件自身的数据，可以简单理解就是组件内部data中本身就存在的数据 --&gt;&#10;    &lt;template id=&quot;temp1&quot;&gt;&#10;        &lt;div class=&quot;box&quot;&gt;&#10;            &lt;h2&gt;大家好,我叫{{userInfo.nickName}}&lt;/h2&gt;&#10;            &lt;button @click=&quot;changeUserInfo&quot;&gt;内部按钮&lt;/button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/template&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        let aaa = {&#10;            template: '#temp1',&#10;            data() {&#10;                return {&#10;                };&#10;            },&#10;            methods: {&#10;                changeUserInfo() {&#10;                    this.userInfo.nickName = '电锯人';&#10;                }&#10;            },&#10;            // 数组语法&#10;            props: [&quot;userInfo&quot;]&#10;            // 对象语法&#10;            // props: {&#10;            //     userInfo : {&#10;            //         nickName&#10;            //     },&#10;&#10;            // }&#10;        };&#10;        const app = Vue.createApp({&#10;            data() {&#10;                return {&#10;                    userInfo: {&#10;                        nickName: '大哥哥'&#10;                    }&#10;                };&#10;            },&#10;            methods: {&#10;&#10;            },&#10;            //这里注册局部变量&#10;            components: {&#10;                aaa&#10;            }&#10;        });&#10;&#10;        app.mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 再上面的代码中，我们本传递到aaa中的是一个原始数据类型，但是现在我们把它改成了一个userInfo的对象，它是一个引用数据类型，对象在传递的时候是地址传递（浅拷贝），同时去修改userInfo的时候，就可以修改userInfo内部的东西">
    </outline>
    <outline text="7.2、利用自定义事件" _note="vue官方推荐使用自定义事件来解决数据流单向的问题&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;style&gt;&#10;    .box {&#10;        width: 300px;&#10;        border: 2px solid #000;&#10;        padding: 10px;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;h2&gt;我的名字叫做:{{userName}}&lt;/h2&gt;&#10;        &lt;aaa :my-name=&quot;userName&quot; @abc=&quot;changeMyName&quot;&gt;&lt;/aaa&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;!-- 所谓组件自身的数据，可以简单理解就是组件内部data中本身就存在的数据 --&gt;&#10;    &lt;template id=&quot;temp1&quot;&gt;&#10;        &lt;div class=&quot;box&quot;&gt;&#10;            &lt;h2&gt;我的名字叫做{{myName}}&lt;/h2&gt;&#10;            &lt;button @click=&quot;changeMyName&quot;&gt;内部修改名字的按钮&lt;/button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/template&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        let aaa = {&#10;            template: '#temp1',&#10;            data() {&#10;                return {&#10;                    userName: '张三',&#10;                    newName: '帕瓦'&#10;                };&#10;            },&#10;            methods: {&#10;                // 这里使用$emit方法，该方法会创建并触发一个自定义事件&#10;                changeMyName() {&#10;                    this.$emit('abc', this.newName);&#10;                }&#10;            },&#10;            // 数组语法&#10;            props: ['myName'],&#10;            // 对象语法&#10;            // props: {&#10;            //     userInfo : {&#10;            //         nickName&#10;            //     },&#10;&#10;            // }&#10;        };&#10;        const app = Vue.createApp({&#10;            data() {&#10;                return {&#10;                    userName: '张三'&#10;                };&#10;            },&#10;            methods: {&#10;                changeMyName(data) {&#10;                    this.userName = data;&#10;                    // this.userName = '早川秋';&#10;                }&#10;            },&#10;            //这里注册局部变量&#10;            components: {&#10;                aaa&#10;            }&#10;        });&#10;&#10;        app.mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 在上面的代码中，我们在子组件aaa中声明了一个changeMyName的方法，该方法会触发一个自定义事件abc，然后，我们在父组件中调用该子组件并且监听abc事件&#10;&gt;&#10;&gt; 当子组件aaa中的changeMyName方法被执行后，就会触发abc事件，同时父组件中会监听到abc事件的触发从而执行了父组件中的changeMyName的方法&#10;&gt;&#10;&gt; 而父组件中的changeMyName方法是修改父组件自己的userName的数据值，而userName的数据值又通过aaa组件的自定义属性传递给了aaa组件内部，所以当userName的值被修改的时候传递给子组件的值也会被修改&#10;&gt;&#10;&gt; 把上面一系列逻辑总结到一起：&#10;&gt;&#10;&gt; 在子组件中触发了自定义事件abc，然后abc执行了父组件的changeMyName方法，该方法修改了父组件的userName，所以传递给子组件的uerName的值也一并修改，最终形成了一个通过子组件触发父组件方法来修改父组件数据的这么一个流程&#10;&#10;同时，如果组件的内部要触发自定义事件，还可以将子组件内部的数据一并传递给外部&#10;&#10;``` javascript&#10;this.$emit(&quot;abc&quot;,参数2)&#10;```&#10;&#10;这里参数2就是传递给外部组件的数据&#10;&#10;同时，在父组件中被自定义事件触发的方法可以接受到emit传递的数据，从而实现了子组件向父组件传递数据的操作&#10;&#10;完整代码如上面的代码块">
    </outline>
  </outline>
  <outline text="8、组件的插槽" _note="当我们在封装组件的时候，我们会发现有一些情况下90%的标签结构都是一样，而小部分地方的标签结构不一样，这种情况下了我们就可以把小部分不同的地方空出来，放入一个插槽，后期通过插槽插入不同的标签结构即可">
    <outline text="8.1、普通插槽（默认插槽）" _note="举例：&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;style&gt;&#10;    .box {&#10;        width: 300px;&#10;        border: 2px solid #000;&#10;        padding: 10px;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;aaa&gt;&#10;            &lt;input type=&quot;text&quot;&gt;&#10;        &lt;/aaa&gt;&#10;    &lt;/div&gt;&#10;    &lt;template id=&quot;temp1&quot;&gt;&#10;        &lt;slot&gt;&lt;/slot&gt;&#10;        &lt;h2&gt;大家好&lt;/h2&gt;&#10;        &lt;h2&gt;我是一个组件&lt;/h2&gt;&#10;        &lt;slot&gt;&lt;/slot&gt;&#10;    &lt;/template&gt;&#10;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        let aaa = {&#10;            template: '#temp1',&#10;        };&#10;        const app = Vue.createApp({&#10;            data() {&#10;                return {&#10;                    userName: '张三'&#10;                };&#10;            },&#10;            methods: {&#10;                changeMyName(data) {&#10;                    this.userName = data;&#10;                    // this.userName = '早川秋';&#10;                }&#10;            },&#10;            //这里注册局部变量&#10;            components: {&#10;                aaa&#10;            }&#10;        });&#10;&#10;        app.mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 插槽的制作依靠**一个slot标签来完成**，在template中写入slot标签，表示该slot所处的位置，会作为一个插槽空出来，然后，我们可以通过在虚拟标签的中间插入内容，从而将插入的内容插入到slot插槽所在的位置">
    </outline>
    <outline text="8.2、具名插槽" _note="故名思意就是具有名字的插槽，插槽在默认情况是不写的名字（默认名字就是&quot;默认&quot;），但是也可以指定名字，然后我们就可以通过名字来指定哪个内容插入到哪个插槽&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;style&gt;&#10;    .box {&#10;        width: 300px;&#10;        border: 2px solid #000;&#10;        padding: 10px;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;aaa&gt;&#10;            &lt;template #default&gt;&#10;                &lt;input type=&quot;text&quot;&gt;&#10;            &lt;/template&gt;&#10;            &lt;template v-slot:footer&gt;&#10;                &lt;button&gt;按钮&lt;/button&gt;&#10;            &lt;/template&gt;&#10;&#10;        &lt;/aaa&gt;&#10;    &lt;/div&gt;&#10;    &lt;template id=&quot;temp1&quot;&gt;&#10;        &lt;!-- 默认插槽 --&gt;&#10;        &lt;slot&gt;&lt;/slot&gt;&#10;        &lt;h2&gt;大家好&lt;/h2&gt;&#10;        &lt;h2&gt;我是一个组件&lt;/h2&gt;&#10;        &lt;!-- 具名插槽 --&gt;&#10;        &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;&#10;    &lt;/template&gt;&#10;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        let aaa = {&#10;            template: '#temp1',&#10;        };&#10;        const app = Vue.createApp({&#10;            data() {&#10;                return {&#10;                    userName: '张三'&#10;                };&#10;            },&#10;            methods: {&#10;                changeMyName(data) {&#10;                    this.userName = data;&#10;                    // this.userName = '早川秋';&#10;                }&#10;            },&#10;            //这里注册局部变量&#10;            components: {&#10;                aaa&#10;            }&#10;        });&#10;&#10;        app.mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 具名插槽通过给slot标签的name属性设置值来取名字&#10;&gt;&#10;&gt; 如果这个插槽没有名字默认就有一个叫做default的名字，也叫默认插槽&#10;&gt;&#10;&gt; 如果想向一个具名插槽插入内容，应该使用 \&lt;template&#10;&gt; v-slot:插槽名\&gt;来插入&#10;&gt;&#10;&gt; v-slot是vue2.6.1之后更新的语法&#10;&#10;现在在vue3中又有新的插槽语法：&#10;&#10;``` html&#10;&lt;template #default&gt;&#10;    &lt;input type=&quot;text&quot; &gt;&#10;&lt;/template&gt;&#10;&lt;template #footer&gt;&#10;    &lt;button&gt;按钮&lt;/button&gt;&#10;&lt;/template&gt;&#10;```&#10;&#10;在新语法中，我们把`v-slot:插槽名` 改成了 `#插槽名`&#10;&#10;现在我们了解插槽之后，我们来尝试做一个简单封装案例&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;    &lt;style&gt;&#10;        .title-bar {&#10;            display: flex;&#10;            padding: 0 20px;&#10;            height: 60px;&#10;            background-color: skyblue;&#10;            justify-content: center;&#10;            align-items: center;&#10;            position: relative;&#10;            color: aliceblue;&#10;        }&#10;&#10;        .left-back {&#10;            position: absolute;&#10;            left: 20px;&#10;        }&#10;&#10;        .right-menu {&#10;            position: absolute;&#10;            right: 20px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;title-bar&gt;&#10;            微信&#10;            &lt;template #right&gt;&#10;                搜索&#10;            &lt;/template&gt;&#10;        &lt;/title-bar&gt;&#10;        &lt;!--  --&gt;&#10;        &lt;title-bar :show-back=&quot;true&quot;&gt;&#10;            朋友圈&#10;            &lt;template #right&gt;&#10;                发朋友圈&#10;            &lt;/template&gt;&#10;        &lt;/title-bar&gt;&#10;&#10;    &lt;/div&gt;&#10;    &lt;template id=&quot;temp1&quot;&gt;&#10;        &lt;div class=&quot;title-bar&quot;&gt;&#10;            &lt;div class=&quot;left-back&quot; v-show=&quot;showBack&quot;&gt;返回&lt;/div&gt;&#10;            &lt;slot&gt;&lt;/slot&gt;&#10;            &lt;div class=&quot;right-menu&quot;&gt;&#10;                &lt;slot name=&quot;right&quot;&gt;&lt;/slot&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/template&gt;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        const app = Vue.createApp({&#10;            data() {&#10;                return {&#10;                    userName: '张三'&#10;                };&#10;            },&#10;            methods: {&#10;                changeMyName(data) {&#10;                    this.userName = data;&#10;                    // this.userName = '早川秋';&#10;                }&#10;            },&#10;&#10;        });&#10;        app.component('title-bar', {&#10;            template: '#temp1',&#10;            props: {&#10;                showBack: {&#10;                    type: Boolean,&#10;                    default: false&#10;                }&#10;            }&#10;        });&#10;        app.mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; ### 以上代码，我们自己封装了一个title-bar全局组件，然后通过不同地方的调用来插入不同的内容从而实现了html的复用">
    </outline>
  </outline>
  <outline text="9、插槽的默认值" _note="**插槽可以设置默认的内容**&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;style&gt;&#10;    .box {&#10;        width: 300px;&#10;        border: 2px solid #000;&#10;        padding: 10px;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;aaa&gt;&#10;            &lt;!-- &lt;template #default&gt;&#10;                &lt;input type=&quot;text&quot;&gt;&#10;            &lt;/template&gt; --&gt;&#10;            &lt;template v-slot:footer&gt;&#10;                &lt;button&gt;按钮&lt;/button&gt;&#10;            &lt;/template&gt;&#10;&#10;        &lt;/aaa&gt;&#10;    &lt;/div&gt;&#10;    &lt;template id=&quot;temp1&quot;&gt;&#10;        &lt;!-- 默认插槽 --&gt;&#10;        &lt;slot&gt;&#10;            &lt;button&gt;我是默认值&lt;/button&gt;&#10;        &lt;/slot&gt;&#10;        &lt;h2&gt;大家好&lt;/h2&gt;&#10;        &lt;h2&gt;我是一个组件&lt;/h2&gt;&#10;        &lt;!-- 具名插槽 --&gt;&#10;        &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;&#10;    &lt;/template&gt;&#10;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        let aaa = {&#10;            template: '#temp1',&#10;        };&#10;        const app = Vue.createApp({&#10;            data() {&#10;                return {&#10;                    userName: '张三'&#10;                };&#10;            },&#10;            methods: {&#10;                changeMyName(data) {&#10;                    this.userName = data;&#10;                    // this.userName = '早川秋';&#10;                }&#10;            },&#10;            //这里注册局部变量&#10;            components: {&#10;                aaa&#10;            }&#10;        });&#10;&#10;        app.mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```">
  </outline>
  <outline text="10、插槽作用域" _note="**作用域插槽就是在插槽中调用组件内部的数据**&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;style&gt;&#10;    .box {&#10;        width: 300px;&#10;        border: 2px solid #000;&#10;        padding: 10px;&#10;    }&#10;&lt;/style&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;        &lt;aaa&gt;&#10;            &lt;template #default=&quot;scope&quot;&gt;&#10;                &lt;h3&gt;我是插入的内容---{{scope.age}}---{{scope.abc}}&lt;/h3&gt;&#10;            &lt;/template&gt;&#10;        &lt;/aaa&gt;&#10;    &lt;/div&gt;&#10;    &lt;template id=&quot;temp1&quot;&gt;&#10;        &lt;h2&gt;我是一个组件&lt;/h2&gt;&#10;        &lt;slot abc=&quot;123&quot; :age=&quot;age&quot;&gt;&lt;/slot&gt;&#10;    &lt;/template&gt;&#10;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        let aaa = {&#10;            template: '#temp1',&#10;            data() {&#10;                return {&#10;                    userName: '张三',&#10;                    age: 18&#10;                };&#10;            },&#10;        };&#10;        const app = Vue.createApp({&#10;            data() {&#10;                return {&#10;                    userName: '张三'&#10;                };&#10;            },&#10;            methods: {&#10;                changeMyName(data) {&#10;                    this.userName = data;&#10;                    // this.userName = '早川秋';&#10;                }&#10;            },&#10;            //这里注册局部变量&#10;            components: {&#10;                aaa&#10;            }&#10;        });&#10;&#10;        app.mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;同时，我们也可以采用ES6解构取值的方式直接从scope中获取需要渲染的数据&#10;&#10;``` html&#10;&lt;template #footer=&quot;{age,abc}&quot;&gt;&#10;    &lt;h3&gt;我是插入的内容 --- {{age}} --- {{abc}}&lt;/h3&gt;&#10;&lt;/template&gt;&#10;```">
  </outline>
</outline>
<outline text="vue组件的生命周期" _note="生命周期就是指组件从创建到销毁的过程，所有的vue组件都有自己的生命周期，该&#10;&#10;周期会经历4个阶段，8个过程&#10;&#10;4个阶段-8个过程：&#10;&#10;创建阶段：创建前、创建后&#10;&#10;挂载阶段：挂载前、挂载后&#10;&#10;更新阶段：更新前、更新后&#10;&#10;销毁阶段：销毁前、销毁后">
  <outline text="1、生命周期与钩子函数" _note="vue在每个生命周期的时候都会执行相应的一些代码，并且这些代码我们希望当到了对应阶段就自动执行，那么，这些代码我们就需要写在钩子函数当中，因为这些钩子函数会在组件对应的生命周期中自动执行，那么写在钩子函数中的代码也会跟着一起被执行掉&#10;&#10;1、beforeCreate() 在创建vue之前&#10;&#10;2、created（）组件创建好之后&#10;&#10;3、beforeMount() 在vue组件接管页面之前&#10;&#10;4、mounted() vue接管页面之后&#10;&#10;5、beforeUpdate() vue组件在内部更新之前&#10;&#10;6、updated() vue足迹爱你内部更新之后&#10;&#10;7、beforeUnmount() 组件被销毁之前，在vue2中叫做beforeDestory()&#10;&#10;8、unmount() 组件销毁之后，在vue2中叫做Destoryed()&#10;&#10;&gt; 注意：&#10;&gt;&#10;&gt; 以上是optionsAPI中的作为钩子函数时使用得到函数名，在compisitonAPI名字前面会加上一个on">
  </outline>
  <outline text="2、跨生命周期的调用" _note="vue在不同的生命周期可以做不同的操作&#10;&#10;           beforeCreate   created   beforeMount   mounted&#10;  -------- -------------- --------- ------------- ---------&#10;  data     false          true      true          true&#10;  \$refs   false          false     false         true&#10;&#10;总体来说，只有2个原则，如果要操作vue内部的东西，一定要在创建之后，如果要操作页面的东西，一定要在挂载（接管页面）之后&#10;&#10;思考：有没有可能在beforeCreate里面就调用data里面的数据&#10;&#10;如果想违背生命周期的调用原则，则需要使用一种特殊方式（跨生命周期调用）&#10;&#10;``` html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;style&gt;&#10;&#10;&lt;/style&gt;&#10;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;app&quot;&gt;&#10;&#10;    &lt;/div&gt;&#10;&#10;&#10;    &lt;script src=&quot;./js/vue3.global.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;./js/axios.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;&#10;        const app = Vue.createApp({&#10;            data() {&#10;                return {&#10;                    msg: 'hello',&#10;                    age: 10&#10;                };&#10;            },&#10;            beforeCreate() {&#10;                // console.error('vue在创建之前的时候----- beforeCreate');&#10;                // // 在下一个 DOM 更新循环结束之后执行延迟回调&#10;                // this.$nextTick(() =&gt; {&#10;                //     // 打印 this.msg 的值&#10;                //     console.log(this.msg);&#10;                // });&#10;&#10;            },&#10;            mounted() {&#10;                this.getData();&#10;            },&#10;            methods: {&#10;                async getData() {&#10;                    try {&#10;                        let result = await axios.get(&quot;http://www.softeem.xin:9544/foodInfo/getListByPage?pageIndex=1&quot;);&#10;                        console.log(result.data.data.listData);&#10;                    } catch (error) {&#10;                        console.log(error);&#10;                    }&#10;                }&#10;            },&#10;            //这里注册局部变量&#10;            components: {&#10;            }&#10;        });&#10;&#10;        app.mount('#app');&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&#10;&lt;/html&gt;&#10;```&#10;&#10;跨生命周期的调用主要是靠 **\$nextTick&#10;方法**，它可以让里面的回调函数在合适的时候执行">
  </outline>
</outline>
  </body>
</opml>
