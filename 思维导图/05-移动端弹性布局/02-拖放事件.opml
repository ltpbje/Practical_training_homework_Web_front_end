<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <dateModified></dateModified>
    <ownerName></ownerName>
  </head>
  <body>
<outline text="&lt;strong&gt;拖放事件&lt;/strong&gt;" _note="一个页面上面的DOM元素默认时不允许拖放的，如果想要拖放它，需要添加一个属&#10;&#10;性 draggable=&quot;true&quot;&#10;&#10;``` html&#10;&lt;div class=&quot;box&quot; draggable=&quot;true&quot;&gt;我时一个可以被拖动的盒子&lt;/div&gt;&#10;```&#10;&#10;通过拖放事件，我们可以拖放各种元素，其中最监管的地方在于确定哪里放生拖放&#10;&#10;事件，有哪些事件时被拖放的元素上触发的，哪些事件时在放置目标上面触发的&#10;&#10;拖动元素的时候，按照操作过程触发以下事件：&#10;&#10;1、dragstart 拖动开始&#10;&#10;2、drag 拖动的时候&#10;&#10;3、dragend 拖动结束的时候&#10;&#10;按下鼠标并开始移动鼠标时，会在拖动元素上触发dragstart事件，此时光标会是禁&#10;&#10;止图标，表示不能把元素放在自己身上，开始拖动时，可以同&#10;dragstart事件来绑定&#10;&#10;事件方法&#10;&#10;当某一个元素被拖动到一个有效的放置目标上面时，又会有以下事件依此触发：&#10;&#10;1、dragenter 拖动的元素进入到放置目标的范围内&#10;&#10;2、dragover 拖动的元素悬停在目标元素上时&#10;&#10;3、drop 拖动的元素在放置目标上松开的时候&#10;&#10;4、dragleave 拖动元素出来了">
  <outline text="1 、自定义放置目标" _note="在html中，默认情况下所有的元素都是可以支持放置目标事件，也就是drop事件，&#10;&#10;但是这些元素默认是不允许放置的，所以也就无法触发drop事件，如果想触发drop&#10;&#10;事件，着需要取消dragenter和dragover事件的默认行为&#10;&#10;``` html&#10; &#10;&lt;html&gt;&#10;&lt;head&gt;&#10;&lt;meta charset=&quot;utf-8&quot;&gt;&#10;&lt;title&gt;&lt;/title&gt;&#10;    &lt;style&gt;&#10;.box{&#10;width:200px;&#10;height:200px;&#10;background:red;&#10;}&#10;.box2{&#10;width:400px;&#10;height:400px;&#10;border:solid 1px #000;&#10;}&#10;&lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;div class=&quot;box&quot; draggable=&quot;true&quot;&gt;我时一个可以被拖动的盒子&#10;&lt;/div&gt;&#10;&lt;div class=&quot;box2&quot;&gt;&#10;我是一个可以放置盒子的盒子&#10;&lt;/div&gt;&#10;&lt;script&gt;&#10;var box2 = document.querySelector(&quot;.box2&quot;);&#10;box2.addEventListener(&quot;dragenter&quot;,function(e){&#10;e = event || window.event;&#10;e.preventDefault();&#10;})&#10;box2.addEventListener(&quot;dragover&quot;,function(e){&#10;e = event || window.event;&#10;e.preventDefault();&#10;})&#10;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;```&#10;&#10;当我们取消了事件的默认行为以后，这个元素上面就可以反之目标了，当我们把元素拖过来的时候，我们发现鼠标的光标也发生变化了">
  </outline>
  <outline text="2、dataTransfer对象" _note="&#10;一个元素拖放到另外一个元素上面的时候，两个元素之间其实只有事件触发，但不会有任何变化，因为拖放事件的本质是一个数据传递的过程，所以为了实现数据传递，我们会使用到事件对象上面的打他Transfer属性，这个属性负责两个元素之间的数据传递，这个属性本身也是一个对象它主要有两个方法&#10;&#10;1、setData() 在拖动的元素上面设置数据&#10;&#10;2、getData()在放置的元素上面获取数据&#10;&#10;``` html&#10;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;&lt;meta charset=&quot;utf-8&quot;&gt;&#10;&lt;title&gt;&lt;/title&gt;&#10;&lt;style&gt;&#10;.big-box{&#10;width:400px;&#10;height:400px;&#10;border:solid 2px #000;&#10;}&#10;.box1{&#10;width:200px;&#10;height:200px;&#10;background:red;&#10;}&#10;.box2{&#10;width:200px;&#10;height:200px;&#10;background:green;&#10;}&#10;&lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;div class=&quot;big-box&quot;&gt;&#10;&lt;/div&gt;&#10;&lt;div class=&quot;box1&quot; draggable=&quot;true&quot; id=&quot;box1&quot;&gt;我是一个可以拖&#10;动的元素&lt;/div&gt;&#10;&lt;div class=&quot;box2&quot; draggable=&quot;true&quot; id=&quot;box2&quot;&gt;我是一个可以拖&#10;动的元素&lt;/div&gt;&#10;&lt;script&gt;&#10;var bigBox = document.querySelector(&quot;.big-box&quot;);&#10;var box1 = document.querySelector(&quot;.box1&quot;);&#10;var box2 = document.querySelector(&quot;.box2&quot;);&#10;bigBox.addEventListener(&quot;dragenter&quot;,function(e){&#10;e = event || window.event;&#10;e.preventDefault()&#10;})&#10;bigBox.addEventListener(&quot;dragover&quot;,function(e){&#10;e = event || window.event;&#10;    e.preventDefault()&#10;})&#10;//当box1被拖动起来的时候&#10;box1.addEventListener(&quot;dragstart&quot;,function(e){&#10;console.log(&quot;box1开始拖动了&quot;)&#10;e = event || window.event;&#10;//向box1中设置一个需要传递的数据&#10;e.dataTransfer.setData(&quot;domId&quot;,this.id);&#10;})&#10;//当box2被拖动起来的时候&#10;box2.addEventListener(&quot;dragstart&quot;,function(e){&#10;console.log(&quot;box2开始拖动了&quot;)&#10;e = event || window.event;&#10;//向box2中设置一个需要传递的数据&#10;e.dataTransfer.setData(&quot;domId&quot;,this.id);&#10;})&#10;bigBox.addEventListener(&quot;drop&quot;,function(e){&#10;e = event || window.event;&#10;var domId = e.dataTransfer.getData(&quot;domId&quot;);&#10;var dragDom = document.querySelector(&quot;#&quot; +&#10;domId);&#10;this.appendChild(dragDom);&#10;})&#10;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;```&#10;&#10;在上面的基础上再进行一个拖放的复制&#10;&#10;``` html&#10; &#10;&lt;html&gt;&#10;&lt;head&gt;&#10;&lt;meta charset=&quot;utf-8&quot;&gt;&#10;&lt;title&gt;&lt;/title&gt;&#10;&lt;style&gt;&#10;.big-box{&#10;width:400px;&#10;height:400px;&#10;border:solid 2px #000;&#10;}&#10;.box1{&#10;width:200px;&#10;height:200px;&#10;background:red;&#10;}&#10;.box2{&#10;width:200px;&#10;height:200px;&#10;background:green;&#10;}&#10;&lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;div class=&quot;big-box&quot;&gt;&#10;&lt;/div&gt;&#10;&lt;div class=&quot;box1&quot; draggable=&quot;true&quot; id=&quot;box1&quot;&gt;我是一个可以拖&#10;动的元素&lt;/div&gt;&#10;&lt;div class=&quot;box2&quot; draggable=&quot;true&quot; id=&quot;box2&quot;&gt;我是一个可以拖&#10;动的元素&lt;/div&gt;&#10;&lt;script&gt;&#10;var bigBox = document.querySelector(&quot;.big-box&quot;);&#10;var box1 = document.querySelector(&quot;.box1&quot;);&#10;var box2 = document.querySelector(&quot;.box2&quot;);&#10;bigBox.addEventListener(&quot;dragenter&quot;,function(e){&#10;e = event || window.event;&#10;e.preventDefault()&#10;})&#10;bigBox.addEventListener(&quot;dragover&quot;,function(e){&#10;e = event || window.event;&#10;e.preventDefault()&#10;})&#10;//当box1被拖动起来的时候&#10;box1.addEventListener(&quot;dragstart&quot;,function(e){&#10;console.log(&quot;box1开始拖动了&quot;)&#10;e = event || window.event;&#10;//向box1中设置一个需要传递的数据&#10;e.dataTransfer.setData(&quot;domId&quot;,this.outerHTML);&#10;//outerHTML获取当前元素的标签+内容&#10;})&#10;//当box2被拖动起来的时候&#10;box2.addEventListener(&quot;dragstart&quot;,function(e){&#10;console.log(&quot;box2开始拖动了&quot;)&#10;e = event || window.event;&#10;//向box2中设置一个需要传递的数据&#10;e.dataTransfer.setData(&quot;domId&quot;,this.outerHTML);&#10;})&#10;bigBox.addEventListener(&quot;drop&quot;,function(e){&#10;e = event || window.event;&#10;var domId = e.dataTransfer.getData(&quot;domId&quot;);&#10;    // var dragDom = document.querySelector(&quot;#&quot; +&#10;domId);&#10;// this.appendChild(dragDom);&#10;this.insertAdjacentHTML(&quot;beforeEnd&quot;,domId);&#10;})&#10;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;```">
  </outline>
  <outline text="3、文件拖放" _note="拖放的主要应用场景就是文件的拖放，那么，&#10;我们现在就以拖放图片文件为例开制作一个拖放文件上传并实现上传图片预览的功能&#10;&#10;``` html&#10; &#10;&lt;html&gt;&#10;&lt;head&gt;&#10;&lt;meta charset=&quot;utf-8&quot;&gt;&#10;&lt;title&gt;&lt;/title&gt;&#10;&lt;style&gt;&#10;#img1{&#10;width:200px;&#10;height:200px;&#10;border:solid 1px #000;&#10;}&#10;&lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;div class=&quot;box&quot;&gt;&#10;&lt;img id=&quot;img1&quot;&gt;&#10;&lt;input type=&quot;file&quot; id=&quot;file1&quot; style=&quot;display: none;&quot;&gt;&#10;&lt;button type=&quot;button&quot; id=&quot;btnChooseFile&quot;&#10;onclick=&quot;this.previousElementSibling.click()&quot;&gt;选择文件&lt;/button&gt;&#10;&lt;/div&gt;&#10;&lt;script&gt;&#10;var file1Dom = document.querySelector(&quot;#file1&quot;);&#10;var img1 = document.querySelector(&quot;#img1&quot;);&#10;file1Dom.addEventListener(&quot;change&quot;,function(e){&#10;e = event || window.event;&#10;var file = this.files[0];&#10;var reg = /^image\/(jpe?g|png|gif)$/;&#10;if(reg.test(file.type)){&#10;img1.src = URL.createObjectURL(file);&#10;}else{&#10;alert(&quot;请选择图片文件&quot;)&#10;}&#10;})&#10;//------------------拖放--------------------------&#10;document.addEventListener(&quot;dragenter&quot;,function(e){&#10;e = event || window.event;&#10;e.preventDefault()&#10;})&#10;document.addEventListener(&quot;dragover&quot;,function(e){&#10;e = event || window.event;&#10;e.preventDefault()&#10;})&#10;document.addEventListener(&quot;drop&quot;,function(e){&#10;e = event || window.event;&#10;e.preventDefault();&#10;if(e.dataTransfer.files.length &gt; 0){&#10;var reg = /^image\/(jpe?g|png|gif)$/;&#10;var file = e.dataTransfer.files[0];&#10;if(reg.test(file.type)){&#10;img1.src = URL.createObjectURL(file);&#10;}else{&#10;alert(&quot;请选择图片文件&quot;)&#10;}&#10;}&#10;})&#10;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;```">
  </outline>
</outline>
<outline text="移动端常用事件" _note="移动端都是触摸事件&#10;&#10;1、touchstart&#10;触摸开始，这个相当与click事件，它比click事件的响应要更快一些&#10;&#10;2、touchend 触摸结束&#10;&#10;3、touchcancel 触摸取消&#10;&#10;4、touchmove 触摸滑动，在滑动过程中不停的触发&#10;&#10;**移动端的事件对象里面有一个很重要的属性**&#10;**changedTouches**，返回的是一个集合，里面包含了你所触摸的所有的点">
  <outline text="移动端案例" _note="``` html&#10; &#10;&lt;html&gt;&#10;&lt;head&gt;&#10;&lt;meta charset=&quot;utf-8&quot;&gt;&#10;&lt;title&gt;&lt;/title&gt;&#10;&lt;meta name=&quot;viewport&quot; content=&quot;width=devicewidth,initial-scale=1,minimum-scale=1,maximum-scale=1,userscalable=no&quot; /&gt;&#10;&lt;style&gt;&#10;*{&#10;padding:0;&#10;margin:0;&#10;}&#10;#app{&#10;width:100vw;&#10;height:100vh;&#10;}&#10;.item{&#10;height:45px;&#10;border:solid 1px #000;&#10;position: relative;&#10;}&#10;.delDiv{&#10;height:inherit;&#10;width:80px;&#10;background:tomato;&#10;color:#fff;&#10;display: flex;&#10;justify-content: center;&#10;align-items: center;&#10;position: absolute;&#10;right:0;&#10;top:0;&#10;}&#10;.div-content{&#10;display: flex;&#10;justify-content: center;&#10;align-items: center;&#10;height:inherit;&#10;background:blue;&#10;color:#fff;&#10;position: absolute;&#10;left:0;&#10;top:0;&#10;width:100%;&#10;transition: all .3s ease-out;&#10;}&#10;&lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;div id=&quot;app&quot;&gt;&#10;&lt;div class=&quot;item&quot;&gt;&#10;&lt;div class=&quot;delDiv&quot;&gt;删除&lt;/div&gt;&#10;&lt;div class=&quot;div-content&quot; data-startx=&quot;&quot;&gt;这里是商品&#10;项&lt;/div&gt;&#10;&lt;/div&gt;&#10;&lt;script&gt;&#10;//获取需要滑动的元素&#10;var div_content = document.querySelector(&quot;.divcontent&quot;);&#10;//因为滑动的元素的距离不能超过删除按钮的宽度，所以我们获取删&#10;除按钮&#10;var delDiv = document.querySelector(&quot;.delDiv&quot;);&#10;//-----------------触摸开始----------------------&#10;div_content.addEventListener(&quot;touchstart&quot;,function(e){&#10;e = event || window.event;&#10;//判断是否是一个手指头在滑动&#10;if(e.changedTouches.length == 1){&#10;//就是一根手指头在触摸&#10;this.dataset.startx =&#10;e.changedTouches[0].clientX;&#10;}&#10;})&#10;//-----------------触摸滑动-----------------------&#10;-&#10;div_content.addEventListener(&quot;touchmove&quot;,function(e){&#10;e = event || window.event;&#10;//实时记录滑动时候的x坐标&#10;var currentX = e.changedTouches[0].clientX;&#10;var _length = currentX -&#10;parseInt(this.dataset.startx);&#10;if(_length &lt; 0){&#10;//向左滑动&#10;if(Math.abs(_length) &gt;&#10;delDiv.clientWidth){&#10;_length = delDiv.clientWidth * (-1);&#10;}&#10;this.style.left = _length + &quot;px&quot;;&#10;}else{&#10;this.style.left = &quot;0px&quot;;&#10;}&#10;})&#10;//----------------触摸结束------------------------&#10;//当你滑动的距离不超过删除按钮的一半时，将滑动元素移动到初始&#10;位置&#10;//当你滑动的距离超过按钮一半的时候，将滑动元素移动到可以完全&#10;展示删除按钮的位置&#10;div_content.addEventListener(&quot;touchend&quot;,function(e){&#10;e = event || window.event;&#10;if(e.changedTouches.length == 1){&#10;var currnetX =&#10;e.changedTouches[0].clientX;&#10;//用手指离开屏幕的时候的坐标减手指开始触摸时候的坐&#10;标，获得当前手指离开屏幕时候向左滑动的距离&#10;var _length = currnetX -&#10;this.dataset.startx;&#10;if(_length &lt; 0){&#10;if(Math.abs(_length) &lt;&#10;delDiv.clientWidth / 2){&#10;this.style.left = &quot;0px&quot;&#10;}else{&#10;this.style.left =&#10;delDiv.clientWidth * (-1) + &quot;px&quot;;&#10;}&#10;}else{&#10;this.style.left = &quot;0px&quot;&#10;}&#10;}else{&#10;this.style.left = &quot;0px&quot;&#10;}&#10;})&#10;&lt;/script&gt;&#10;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;```">
  </outline>
</outline>
  </body>
</opml>
