<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <dateModified></dateModified>
    <ownerName></ownerName>
  </head>
  <body>
<outline text="&lt;strong&gt;nodeJS&lt;/strong&gt;" _note="简单来说就是JavaScript在服务器上的运行环境&#10;&#10;test&#10;&#10;我们之前在学习JavaScript的时候有这么一个概念，JavaScript是运行在浏览器上面的，它必须依托HTML才能存在，没有网页的存在就没有JS的执行，&#10;所以我们认为浏览器和HTML就分别是JavaScript在客户端中运行的平台和环境，但是后期人们把运行在浏览器中的chorme&#10;V8移植到了服务器里，这样就可以保障我们的JS代码可以在服务器端运行，而不需要依赖浏览器和网页了&#10;&#10;&gt; 注意：&#10;&gt;&#10;&gt; node中只有ES，没有DOM和BOM">
  <outline text="1、nodeJS基础" _note="安装好之后，可以在命令行终端输入 node&#10;-v查看，如果显示了版本号就说明安装成\&#10;功\&#10;安装成功之后，我们如果想允许一个JS文件非常简单，一个指令&#10;&#10;``` powershell&#10;node 文件名.js //node指令后面其实是一个路径指向一个需要执行的JS文件&#10;```&#10;&#10;在node中不能允许DOM和BOM，只能允许ECMAScript&#10;&#10;``` powershell&#10;window.alert(&quot;a&quot;); //报错，因为window是BOM中提供的对象，不能在node中使用&#10;```">
  </outline>
  <outline text="2、CommonJS模块化开发" _note="之前我们在学习ES6+的时候，使用的是ESModule的模块化规范，这是ES的通用规范，基本上90%以上使用到JS的地方都是遵循这个规范，但是node就不是的，它执行的是CommonJS规范&#10;&#10;&gt; **模块化开发现行规范**&#10;&gt;&#10;&gt; 1、浏览器及ECMA执行的是通用规范ESModule&#10;&gt;&#10;&gt; 2、nodeJS平台使用的是CommonJS&#10;&#10;  **规范**   **导入**    **导出**&#10;  ---------- ----------- ----------------&#10;  ESModule   import      export default&#10;  CommonJS   require()   module.exports">
  </outline>
  <outline text="3、CommonJS的模块导入" _note="现在有以下文件&#10;&#10;a.js&#10;&#10;``` javascript&#10;console.log(&quot;我是a文件&quot;)&#10;```&#10;&#10;b.js&#10;&#10;``` javascript&#10;console.log(&quot;我是b文件&quot;);&#10;require(&quot;./a.js&quot;) //console.log(&quot;我是a文件&quot;)&#10;require(&quot;./a.js&quot;) //console.log(&quot;我是a文件&quot;)&#10;require(&quot;./a.js&quot;) //console.log(&quot;我是a文件&quot;)&#10;require(&quot;./a.js&quot;) //console.log(&quot;我是a文件&quot;)&#10;require(&quot;./a.js&quot;) //console.log(&quot;我是a文件&quot;)&#10;require(&quot;./a.js&quot;) //console.log(&quot;我是a文件&quot;)&#10;```&#10;&#10;当我们多次导入的时候，我们发现最终a.js的代码只执行了一次&#10;&#10;require方法导入一个模块之后，它会这个模块缓存下来，下在再导入的时候，则直接从缓存里面拿，在上面的代码中，表面上看起来是导入了6次，但是实际上只有第一次导入是真的导入了，剩下的5次全部都是从缓存里面拿的">
  </outline>
  <outline text="4、CommonJS的模块导出" _note="导入和导出其实是一对，所以在node中如果我们导出可以使用以下两个方式&#10;&#10;1、module.exports 直接导出&#10;&#10;2、exports 指针导出&#10;&#10;a.js&#10;&#10;``` javascript&#10;let userName = 123;&#10;module.exports = userName;&#10;```&#10;&#10;b.js&#10;&#10;``` javascript&#10;const userName = require('./a.js');&#10;console.log(userName);&#10;```&#10;&#10;以上完成了一个基础的导入导出&#10;&#10;在CommonJS规范中，每个文件都会专门用于导出的属性叫做module.exports，而&#10;&#10;在require中导入的实际上module.exports">
    <outline text="4.1、module.exports" _note="在每个文件里面都会有一个负责导出的对象，module.exports，如果我们直接打印&#10;&#10;这个对象我们会看到一个空对象&#10;&#10;``` javascript&#10;let userName = 123;&#10;let age = 20;&#10;let obj = {&#10;userName,&#10;age&#10;}&#10;module.exports = obj;&#10;```&#10;&#10;如果我们有多个变量需要同时导出，我们可以把这个变量封装成对象，然后导出&#10;&#10;b.js&#10;&#10;``` javascript&#10;const {userName,age} = require('./a.js'); //ES6解构导入&#10;console.log(userName);&#10;```">
    </outline>
    <outline text="4.2、exports" _note="在CommonJS当中，真正负责导出的只有module.exports，但是还有一个指针可以&#10;&#10;指向这个module.exports&#10;&#10;``` javascript&#10;module.exports === exports&#10;```&#10;&#10;a.js&#10;&#10;``` javascript&#10;let userName = 123;&#10;let age = 20;&#10;module.exports = userName;&#10;exports = age;&#10;```&#10;&#10;b.js&#10;&#10;``` javascript&#10;const abc = require('./a.js');&#10;console.log(abc);&#10;```&#10;&#10;上面的代码中，既有module.exports，又有exports，那么b里面到底导入的是谁？&#10;&#10;始终记住一句话，真正负责导入的是 module.exports ，所以结果是userName">
    </outline>
  </outline>
  <outline text="5、node平台的模块化功能" _note="node是一个运行平台，与浏览器一样用于运行JS，同理在弄得、上面，它会内置一些模块提供给我们使用">
    <outline text="5.1、path模块" _note="path模块是node平台子代的模块化开发中使用的一个内置模块，遵循CommonJS的模块化开发规范&#10;&#10;``` javascript&#10;__dirname //代表当前JS文件所属的文件夹所在目录的路径&#10;__filename //代表当前JS文件的路径&#10;```&#10;&#10;以上两个内置变量是node平台上面的最基础的两个点，也是经常会使用到的变量，\&#10;这两个变量负责路径\&#10;其中关于路径的处理，nodeJS平台有专门的模块去处理，这个模块就是path模块，\&#10;它不用下载，在安装nodeJS的时候就已经自带了&#10;&#10;``` javascript&#10;const path = require(&quot;path&quot;)&#10;```&#10;&#10;``` javascript&#10;const path = require(&quot;path&quot;)&#10;//1、join方法路径拼接&#10;let p1 = path.join(__dirname,'/txt');&#10;console.log(p1);&#10;//2、extname方法，获取某个路径的后缀名、&#10;let p2 = path.extname(__filename);&#10;console.log(p2);&#10;//3、isAbsolute方法，判断是否是绝对路径&#10;let p3 = path.isAbsolute(__dirname);&#10;console.log(p3);&#10;//4、resolve方法，将相对路径转换成绝对路径&#10;let p4 = path.resolve(&quot;./txt/abc.txt&quot;);&#10;console.log(p4);&#10;```">
    </outline>
    <outline text="5.2、fs模块" _note="一般我们有了路径之后，就会有文件，我们可以通过某一个路径找到某一个文件或者目录，在node当中有一个专门用来读写文件的模块就是FS模块（flie&#10;system）&#10;&#10;``` javascript&#10;&#10;&#10;const path = require(&quot;path&quot;);&#10;&#10;const fs = require(&quot;fs&quot;);&#10;//1、fs.existsSync() 判断路径是否存在&#10;let p1 = path.join(__dirname,&quot;/txt/abc.txt&quot;);&#10;let result = fs.existsSync(p1);&#10;console.log(result);&#10;//2、fs.rmdirSync() 删除空文件夹，如果删除的不是空文件夹会报错&#10;let p2 = path.join(__dirname,&quot;/img&quot;);&#10;if(fs.existsSync(p2)){&#10;fs.rmdirSync(p2);&#10;}else{&#10;console.log(&quot;这个文件夹路径不存在&quot;)&#10;}&#10;//3、fs.unlinkSync() 根据路径删除文件&#10;let p3 = path.join(__dirname,'/txt/abc.txt');&#10;if(fs.existsSync(p3)){&#10;fs.unlinkSync(p3)&#10;}else{&#10;console.log(&quot;这个文件不存在&quot;)&#10;}&#10;//4、fs.copyFileSync(oldPath,newPath) 复制文件&#10;let oldPath = path.join(__dirname,&quot;/txt/abc.txt&quot;);&#10;let newPath = path.join(__dirname,&quot;/123/abc.txt&quot;);&#10;fs.copyFileSync(oldPath,newPath);&#10;//5、fs.renameSync(oldPath,newPath) 文件重命名&#10;let oldPath = path.join(__dirname,&quot;/txt/abc.txt&quot;);&#10;let newPath = path.join(__dirname,&quot;/txt/123.txt&quot;);&#10;fs.renameSync(oldPath,newPath);&#10;//6、fs.mkdirSync() 根据路径创建文件夹&#10;let p6 = path.join(__dirname,&quot;/css&quot;);&#10;if(fs.existsSync(p6)){&#10;console.log(&quot;当前路径已经存在&quot;)&#10;}else{&#10;fs.mkdirSync(p6);&#10;}&#10;//7、fs.readdirSync() 读取某一个路径下的文件夹内部信息&#10;let arr = fs.readdirSync(__dirname + &quot;/txt&quot;);&#10;console.log(arr);&#10;```&#10;&#10;1.  fs.statSync() 读取路径状态&#10;&#10;``` javascript&#10;let sta = fs.statSync(__dirname + &quot;/txt&quot;);&#10;console.log(sta);&#10;sta.isFile() //判断是否是文件路径&#10;sta.isDirectory() //判断是否是文件夹路径&#10;```&#10;&#10;9、fs.readFileSync() 通过路径读取路径指向文件的内部内容&#10;&#10;``` javascript&#10;let result = fs.readFileSync(__dirname + &quot;/123/abc.txt&quot;,{&#10;encoding:&quot;utf8&quot;&#10;})&#10;console.log(result);&#10;```&#10;&#10;10、fs.writeFileSync() 把内容写入一个文件&#10;&#10;``` javascript&#10;let str = `今天天气不错`;&#10;fs.writeFileSync(__dirname + &quot;/123/abc.txt&quot;,str,&#10;{encoding:&quot;utf8&quot;})&#10;```">
    </outline>
  </outline>
</outline>
<outline text="nodeJS第三方模块" _note="之前我们学习了内置模块，其实node还有大量的第三方模块提供给我们，比如，axios请求库，抓包分析cheerio，数据库操作mysql，还有比较一些基于nodeJS环境下运行的后端程序框架express，koa，egg等这些第三方模块有一个专门的管理工具叫做npm，在安装nodejs的时候已经自带安装了这个工具&#10;network package mananger">
  <outline text="1、npm初始化" _note="nodeJS都是以文件夹为单位来管理项目，如果当前的文件夹是一个node项目则应该首先进行初始化操作，初始化操作命令&#10;&#10;``` cmd&#10;npm init&#10;```&#10;&#10;在初始化过程中会叫你添加项目的注册信息：&#10;&#10;-   package name：项目名称&#10;&#10;-   version：版本号&#10;&#10;-   description：项目简介&#10;&#10;-   entry point：项目入口文件&#10;&#10;-   test command：项目的自定义命令&#10;&#10;-   git repository：项目版本控制&#10;&#10;-   keywords：项目关键字&#10;&#10;-   author：项目作者&#10;&#10;-   license: (ISC) ：项目发行许可&#10;&#10;初始化完成之后会生成一个package.json的文件，这个文件主要就是用来记录当前项目的详细信息，后面我们如果安装了第三方模块，还会将这些第三方相关的依赖包信息也进行记录，方便后续版本迭代、项目迁移、项目上线部署的时候还原项目，也可以防止项目维护中的误删除操作">
  </outline>
  <outline text="2、npm远程仓库" _note="有一个网站上面记录了npm这个包管理器中所管理的所有的第三方模块，网站地址：[www.npmjs.com](www.npmjs.com)，我们可以根据自己的需求去查找包的相关信息同时我们也可以通过npm包管理器提供的相关指令直接在命令行中进行操作&#10;&#10;``` cmd&#10;npm info 包名称 #查询包信息&#10;npm install 包名称 #安装包&#10;```&#10;&#10;同时我们在执行包安装的时候还会添加一些名称参数（选项）来对安装信息做一些记录&#10;&#10;-   \--save：生产环境&#10;&#10;-   \--save-dev：开发环境&#10;&#10;而当我们做好以上记录之后，当我们的项目发生迁移迭代或者上线部署的时候，我们可以通过以下命令做包的重构&#10;&#10;``` cmd&#10;npm install&#10;```&#10;&#10;同时，我们在安装包的时候还可以直接包的版本&#10;&#10;``` cmd&#10;npm install axios@1&#10;```&#10;&#10;如果需要卸载已经安装好的包&#10;&#10;``` cmd&#10;npm uninstall 包名称&#10;```&#10;&#10;&gt; **npm** **镜像设置**&#10;&gt;&#10;&gt; 由于npm在下载包的时候是从国外服务器下载，所以会非常慢，并且经常超时&#10;&gt;&#10;&gt; 到底下载失败，所以我们会设置npm使用国内镜像的地址来进行下载安装&#10;&gt;&#10;&gt; ``` cmd&#10;&gt; npm config set registry https://registry.npmmirror.com&#10;&gt; ```&#10;&#10;命令总结：&#10;&#10;  **说明**           **命令**                       **简写**&#10;  ------------------ ------------------------------ ----------------------------&#10;  安装包             npm install 包名               npm i 包名&#10;  安装生产环境包     npm install 包名 \--save       npm i 包名 -S&#10;  安装开发环境包     npm install 包名 \--save-dev   npm i 包名 -D&#10;  删除包             npm uninstall 包名             npm un 包名&#10;  只安装生产环境包   npm install \--production      npm i -production&#10;  只安装开发环境包   npm install \--development     npm install \--development">
  </outline>
  <outline text="&lt;strong&gt;3、使用 axios + cheerio 完成数据抓取&lt;/strong&gt;" _note="制作一个简单的本地基于node运行的数据抓取的小工具，需要使用到的两个包&#10;&#10;1、axios这个是一个跨平台的包，可以在node环境下使用，也可以直接在浏览器中使用，这个是一个当前比较主流的用来做http/https数据请求的库&#10;&#10;2、cheerio&#10;，这个包是一个html文档分析的包，然后我们可以通过JQuery的语法来操作html字符串中的数据&#10;&#10;``` javascript&#10;const axios = require(&quot;axios&quot;);&#10;let url = &quot;https://axios-http.com/zh/docs/example&quot;;&#10;const getData = async () =&gt; {&#10;let resp = await axios.get(url);&#10;console.log(resp.data);&#10;}&#10;getData();&#10;```&#10;&#10;&gt; &#10;&gt;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 经过上面的代码，我们可以得到服务器返回的结果，这个结果是一个浏览器请&#10;&gt;&#10;&gt; 求一个网站以后返回的结果，其中响应的结果是一个固定的数据结构，其中真&#10;&gt;&#10;&gt; 实的响应数据在这个数据结构的data属性中，返回的数据一般会根据后端的设&#10;&gt;&#10;&gt; 置情况来决定的，这里的请求的地址请求的并不是单纯的数据，而是请求的页&#10;&gt;&#10;&gt; 面（html字符串）&#10;&gt;&#10;&gt; 总结以上步骤：&#10;&gt;&#10;&gt; 1、axios模拟了一个请求&#10;&gt;&#10;&gt; 2、axios是基于Promise封装的一个请求库，所以我们可以使用 await / async&#10;&gt;&#10;&gt; 或者 then().catch() 来实现响应处理&#10;&gt;&#10;&gt; 3、响应结果会在axios中发送请求的方法的返回值中，其中真实数据的部分在&#10;&gt;&#10;&gt; 返回值的data属性中&#10;&#10;抓取图片&#10;&#10;``` javascript&#10;const axios = require(&quot;axios&quot;);&#10;const cheerio = require(&quot;cheerio&quot;);&#10;const fs = require(&quot;fs&quot;);&#10;const path = require(&quot;path&quot;);&#10;const getData = async () =&gt; {&#10;try{&#10;let result = [];&#10;let url = 'https://www.jd.com';&#10;let resp = await axios.get(url);&#10;let $ = cheerio.load(resp.data);&#10;$(&quot;.service_list li&quot;).each((index,item) =&gt; {&#10;let obj = {};&#10;obj.imgSrc =&#10;$(item).find(&quot;.service_ico_img&quot;).attr(&quot;src&quot;);&#10;obj.title = $(item).find(&quot;.service_txt&quot;).text();&#10;result.push(obj);&#10;})&#10;fs.writeFileSync(path.join(__dirname,&quot;/imgResult.txt&quot;),JSON.stri&#10;ngify(result),{encoding:&quot;utf8&quot;});&#10;console.log(&quot;写入成功&quot;);&#10;//图片的真实地址已经被我们抓取到了，现在我们可以开始下载图片了&#10;for(let item of result){&#10;//遍历所有的图片地址&#10;let url2 = item.imgSrc;&#10;let p = await axios.get(url2,{&#10;responseType:&quot;stream&quot;&#10;})&#10;let currentImgPath =&#10;path.join(__dirname,`/iconImg/${item.title}.png`);&#10;//创建一个可以写入流数据的容器&#10;let currentImgStream =&#10;fs.createWriteStream(currentImgPath);&#10;p.data.pipe(currentImgStream);&#10;console.log(&quot;图片下载成功&quot;)&#10;}&#10;}catch(error){&#10;console.log(error);&#10;}&#10;}&#10;getData();&#10;```&#10;&#10;&gt; &#10;&gt;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 这里代码与上面的文本抓取主要区别的两个地方&#10;&gt;&#10;&gt; 1、axios的请求过程中，我们把响应的数据类型改成stream&#10;&gt;&#10;&gt; 2、我们使用fs模块中的createWriteStream方法创建一个可以写入流的容器&#10;&gt;&#10;&gt; 注意：&#10;&gt;&#10;&gt; 上面的功能看起来实现了数据和文件的抓取，但是本质上是利用了文件上传的功能，因为我们现在写的功能都是基于nodeJS的，而nodeJS是JavaScript的服务器运行环境，所以我们这里抓取图片实际上是将一个图片文件传递到我们自己的本地服务器中保存，这个过程其实就是一个文件上传的过程">
  </outline>
  <outline text="4、nodeJS对Excel文件的操作" _note="先下载第三方模块，node-xlsx&#10;&#10;``` cmd&#10;npm i node-xlsx -S&#10;```">
    <outline text="4.1、读取excel文件" _note="``` javascript&#10;const path = require(&quot;path&quot;);&#10;const fs = require(&quot;fs&quot;);&#10;const xlsx = require(&quot;node-xlsx&quot;);&#10;let result = fs.readFileSync(path.join(__dirname,&quot;/demo.xlsx&quot;));&#10;let xp = xlsx.parse(result);&#10;console.log(xp);&#10;```&#10;&#10;读取结果&#10;&#10;``` javascript&#10;[&#10;    { name: 'Sheet1', data: [ [Array], [Array], [Array] ] },&#10;    { name: 'Sheet2', data: [] },&#10;    { name: 'Sheet3', data: [] }&#10;]&#10;```&#10;&#10;它的结果是个数组，在这个数组中有三个对象，这三个对象我们可以认为就是对应的excel表格当中的工作表，里面的name属性就是一个单独的工作表标题，data里面就是当前工作表的数据，然后每一个工作表形成一个对象，然后多个工作表组合成excel数组，我们就认为这个excel数组其实就是整个excel文件然后我们答应工作表中的data属性&#10;&#10;``` javascript&#10;[&#10;    [ '姓名', '性别', '身高', '体重' ],&#10;    [ '张三', '男', 170, 170 ],&#10;    [ '李四', '女', 170, 170 ]&#10;]&#10;```&#10;&#10;以上就是data中的数据结构，我们可以发现，data是一个二维数组，其中二维的部分的每一个数组就相当于是一行数据接下来把上面的数据转换成JSON格式&#10;&#10;&gt; 注意：&#10;&gt;&#10;&gt; 千万不要直接就序列化，因为JSON对象是按键值对的形式来储存数据的，但是上面的数据中只有值（value），没有键（key），所以对于这种数据我们在转JSON的时候需要对其做一些二次处理，给这些数据拼上key&#10;&#10;``` javascript&#10;const path = require(&quot;path&quot;);&#10;const fs = require(&quot;fs&quot;);&#10;const xlsx = require(&quot;node-xlsx&quot;);&#10;let result = fs.readFileSync(path.join(__dirname,&quot;/demo.xlsx&quot;));&#10;let xp = xlsx.parse(result);&#10;//将xp中的数据转换成JSON格式&#10;let resultArr = [];&#10;let firstExcelTable = xp[0];&#10;for(let i = 0;i &lt; firstExcelTable.data.length;i++){&#10;//每循环一次，代表一行数据&#10;let obj = {};&#10;for(let j = 0;j &lt; firstExcelTable.data[i].length;j++){&#10;//遍历一行当中的每一个数据&#10;let propertyName = firstExcelTable.data[0][j]; //获取obj对&#10;象的属性名&#10;obj[propertyName] = firstExcelTable.data[i][j]; //获取obj&#10;对象的属性值&#10;}&#10;resultArr.push(obj);&#10;}&#10;fs.writeFileSync(path.join(__dirname,&quot;/excel.json&quot;),JSON.stringif&#10;y(resultArr),{encoding:&quot;utf8&quot;})&#10;console.log(&quot;写入成功&quot;)&#10;```">
    </outline>
    <outline text="4.2、写入excel文件" _note="``` javascript&#10;const path = require(&quot;path&quot;);&#10;const fs = require(&quot;fs&quot;);&#10;const xlsx = require(&quot;node-xlsx&quot;);&#10;//第一步：读取JSON文件&#10;let result1 =&#10;fs.readFileSync(path.join(__dirname,&quot;/excel.json&quot;));&#10;let objStr = result1.toString();&#10;let jsonObj = JSON.parse(objStr);&#10;//第二步：构造所需的excel数据结构&#10;let excelObj = {&#10;name:&quot;haha&quot;,&#10;data:[]&#10;}&#10;//第三步：转换数据结构&#10;//构造第一行数据，也就是excel的表头，内容即为现在jsonObj对象的属性名&#10;let excelFirstLine = Object.keys(jsonObj[0]);&#10;//将第一行数据添加到工作表的data中&#10;excelObj.data.push(excelFirstLine);&#10;//接下来添加excel当中真正的数据，也就是每个对象的属性值&#10;jsonObj.forEach(item =&gt; {&#10;excelObj.data.push(Object.values(item));&#10;});&#10;//第四步：根据数据生成excel文件&#10;//现在我们把excelObj当中的数据再转回成buffer类型，准备写入&#10;let excelBuffer = xlsx.build([excelObj]);&#10;//把数据写入到硬盘（注意：写入硬盘实际就是把数据作为文件保存下来）&#10;fs.writeFileSync(path.join(__dirname,&quot;/new.xlsx&quot;),excelBuffer,&#10;{encoding:&quot;utf8&quot;})&#10;console.log(&quot;写入成功&quot;)&#10;```">
    </outline>
  </outline>
</outline>
  </body>
</opml>
