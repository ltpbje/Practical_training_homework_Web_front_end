<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <dateModified></dateModified>
    <ownerName></ownerName>
  </head>
  <body>
<outline text="牛客网刷题" _note="">
  <outline text="变量声明提升" _note="var 和 function 有变量声明提升&#10;&#10;执行下列程序，输出结果为（）&#10;&#10;``` javascript&#10;var a = 1;&#10;function fn(){&#10;    var a = 2;&#10;    function a(){console.log(3);}&#10;    return a;&#10;    function a(){console.log(4);}&#10;}&#10;var b = fn();&#10;console.log(b);&#10;```&#10;&#10;A\&#10;1&#10;&#10;B\&#10;2&#10;&#10;C\&#10;f a(){console.log(3);}&#10;&#10;D\&#10;f a(){console.log(4);}\&#10;正确答案：B&#10;&#10;JavaScript&#10;提升是指解释器在执行代码之前，似乎将函数、变量、类或导入的声明移动到其作用域的顶部的过程。[MDN文档](https://developer.mozilla.org/zh-CN/docs/Glossary/Hoisting)\&#10;因为： var 定义的变量有变量提升，function 定义的函数也有函数提升。&#10;&#10;所以 函数fn()的执行过程相当于：&#10;&#10;``` javascript&#10;function fn(){&#10;        function a(){ console.log(3) }&#10;        function a(){ console.log(4) }&#10;        var a;&#10;        a = 2;&#10;        return a;&#10;}&#10;```&#10;&#10;变量提升及函数提升可[参考](https://www.cnblogs.com/liuhe688/p/5891273.html)">
  </outline>
  <outline text="+ 字符串拼接" _note="Javascript中表达式 &quot;2&quot;+3+4 的值为？&#10;&#10;A\&#10;&quot;27&quot;\&#10;B\&#10;9\&#10;C\&#10;&quot;234&quot;\&#10;D\&#10;&quot;9&quot;&#10;&#10;＋是左连接，结果为字符串，\&#10;－是右连接，结果为number 会转换数据类型">
  </outline>
  <outline text="XML" _note="1.什么是 XML?&#10;&#10;XML 指可扩展标记语言（EXtensible Markup Language）\&#10;XML 是一种标记语言，很类似 HTML\&#10;XML 的设计宗旨是传输数据，而非显示数据 用于传输数据而非显示数据\&#10;XML 标签没有被预定义。您需要自行定义标签。\&#10;XML 被设计为具有自我描述性。\&#10;XML 是 W3C 的推荐标准&#10;&#10;2.XML 与 HTML 的主要差异&#10;&#10;XML 不是 HTML 的替代。&#10;&#10;XML 和 HTML 为不同的目的而设计：&#10;&#10;XML 被设计为传输和存储数据，其焦点是数据的内容。&#10;&#10;HTML 被设计用来显示数据，其焦点是数据的外观。&#10;&#10;**HTML 旨在显示信息，而 XML 旨在传输信息**。">
  </outline>
  <outline text="渲染页面：浏览器的工作原理" _note="[渲染页面：浏览器的工作原理](https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work)&#10;&#10;以下哪些操作会触发Reflow：&#10;&#10;``` javascript&#10;var obj = document.getElementById(“test”);&#10;```&#10;&#10;A\&#10;alert(obj.className)\&#10;B\&#10;alert(obj.offsetHeight)\&#10;C\&#10;obj.style.height = &quot;100px&quot;\&#10;D\&#10;obj.style.color = &quot;red&quot;\&#10;正确答案： BC。&#10;&#10;B计算了offsetHeight，C重新设置了高度。&#10;&#10;A打印出类名，无影响。&#10;&#10;D重新设置背景，引起重绘。&#10;&#10;reflow(回流)和repaint(重绘)&#10;&#10;简要：整个在浏览器的渲染过程中（页面初始化，用户行为改变界面样式，动画改变界面样式等）reflow(回流)和repaint(重绘)&#10;会大大影响web性能，尤其是手机页面。因此我们在页面设计的时候要尽量减少reflow和repaint。&#10;&#10;什么是reflow和repaint（原文链接：&lt;http://www.cnblogs.com/Peng2014/p/4687218.html&gt;）&#10;&#10;**reflow**：例如某个子元素样式发生改变，直接影响到了其父元素以及往上追溯很多祖先元素（包括兄弟元素），这个时候浏览器要重新去渲染这个子元素相关联的所有元素的过程称为回流。&#10;&#10;**reflow**：几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显&#10;示与隐藏）等，都将引起浏览器的&#10;reflow。鼠标滑过、点击......只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲&#10;染。通常我们都无法预估浏览器到底会 reflow&#10;哪一部分的代码，它们都彼此相互影响着。&#10;&#10;**repaint**：如果只是改变某个元素的背景色、文&#10;字颜色、边框颜色等等不影响它周围或内部布局的属性，将只会引起浏览器&#10;repaint（重绘）。repaint 的速度明显快于 reflow&#10;&#10;**下面情况会导致reflow发生**&#10;&#10;1：改变窗口大小&#10;&#10;2：改变文字大小&#10;&#10;3：内容的改变，如用户在输入框中敲字&#10;&#10;4：激活伪类，如:hover&#10;&#10;5：操作class属性&#10;&#10;6：脚本操作DOM&#10;&#10;7：计算offsetWidth和offsetHeight&#10;&#10;8：设置style属性&#10;&#10;setInterval：定时器（Interval Timer）\&#10;setTimeout：延时器（Timeout Timer）">
  </outline>
  <outline text="js中的类是函数">
    <outline text="题目一" _note="执行以下程序，下列选项中，说法错误的是（）&#10;&#10;``` javascript&#10;class Phone{&#10;  constructor(brand){&#10;    this.brand = brand;&#10;}&#10;  call(){}...①&#10;}&#10;function playGame(){console.log(&quot;我可以打游戏&quot;)};&#10;function photo(){console.log(&quot;我可以拍照&quot;)};&#10;console.log(typeof Phone);...②&#10;var p = new Phone('华为');&#10;console.log(p.brand);&#10;```&#10;&#10;A\&#10;①式的call方法是定义在类Phone的prototype对象上&#10;&#10;B\&#10;②式输出结果为Object&#10;&#10;C\&#10;③式输出结果为华为&#10;&#10;D\&#10;若想一次性给类添加playGame和photo两个实例方法，可以使用Object.assign(Phone.prototype,{playGame,photo})\&#10;类的所有实例方法均定义在类的原型对象上，因此，在类内定义的实例方法和在类的原型对象上定义方法是等价的，call()是实例方法，&#10;&#10;正确答案：B&#10;&#10;**类的本质是函数，**实际上，ES6中的类可以视为ES5中构造函数的另一种写法，所以②式的输出结果为function而不是Object，B选项说法错误，符合题意">
    </outline>
    <outline text="题目二" _note="``` javascript&#10;var F=function(){};&#10;Object.prototype.a=function(){};&#10;Function.prototype .b=function(){};&#10;var f=new F();&#10;```&#10;&#10;关于这段代码的描述,正确的是：\&#10;A\&#10;f能取到a，但取不到b\&#10;B\&#10;f能取到a,b\&#10;C\&#10;F能取到b，不能取到a\&#10;D\&#10;F能取到a，不能取到b&#10;&#10;正确答案：**A**">
    </outline>
  </outline>
  <outline text="操作符之间的优先级" _note="执行以下程序，输出结果为（）&#10;&#10;``` javascript&#10;var a = 4 &gt;= 6 || true &amp;&amp; 1 || false;&#10;console.log(a);&#10;```&#10;&#10;**操作符之间的优先级（高到低）**：算数操作符 → 比较操作符 →&#10;布尔（逻辑）操作符 → &quot;=&quot;赋值符号&#10;&#10;逻辑操作符中，逻辑与（&amp;&amp;）优先级高于逻辑或（\|\|）&#10;&#10;所以执行顺序为&#10;&#10;① 4 \&gt;= 6，结果是false（比较操作符返回布尔值）&#10;&#10;② true &amp;&amp;&#10;1，结果是1（逻辑与的规则：第一个操作数是真值，则返回第二个操作数）&#10;&#10;原式变为 false \|\| 1 \|\| false（按正常顺序执行）&#10;&#10;**重要 容易忘**\&#10;③ false \|\|&#10;1，结果是1（**逻辑或的规则：第一个操作数是假值，则返回第二个操作数**）&#10;&#10;**重要 容易忘** \&#10;④ 1 \|\|&#10;false，结果是1（**逻辑或的规则：第一个操作数是真值，则直接返回第一个操作数**）&#10;&#10;![](https://i-blog.csdnimg.cn/direct/f65e504ce0374bdb8e07fd5e94a925ca.png &quot;fig:&quot;)">
  </outline>
  <outline text="SQL视图" _note="下列关于视图的说法错误的是：\&#10;A\&#10;视图是从一个或多个基本表导出的表，它是虚表\&#10;B\&#10;视图一经定义就可以和基本表一样被查询、删除和更新&#10;&#10;`不能说它和基本表一样`&#10;&#10;C\&#10;某一用户可以定义若干个视图\&#10;D\&#10;视图可以用来定义新的视图\&#10;正确答案：B&#10;&#10;视图是虚表 不进行数据存储 数据库中存储的仅仅是视图的定义&#10;&#10;视图是一个**虚表**，**即视图所对应的数据不进行实际存储**，数据库中只存储视图的定义，在对视图的数据进行操作时，系统根据视图的定义去操作与视图相关联的基本表。&#10;&#10;**视图基本上只用于查询，部分视图可更新，但不是所有视图都能更新。只有由单一table子集构成的视图，即若视图是从某个基本表使用选择、投影操作导出的，并且包含了基本表的主键，则可更新**">
  </outline>
  <outline text="哈希表" _note="根据**关键字**来存数据 \&#10;同样也根据**关键字**来找数据&#10;&#10;设哈希表长为8，哈希函数为Hash&#10;(key)=key%7。**初始记录关键字**序列为(32，24，15，27，20，13)，用链地址法作为解决冲突方法的平均查找长度是（）\&#10;A\&#10;1.4\&#10;B\&#10;1.5\&#10;C\&#10;1.6\&#10;D\&#10;1.7&#10;&#10;哈希表和我们日常生活息息相关。比如，当你在电脑上搜索文件时，电脑会用一种快速的方法帮你找到文件，这个方法就是哈希表。它还用在数据库中快速检索数据，以及在编程中处理大量数据时提高效率。">
  </outline>
  <outline text="四叉树 二叉树" _note="n个节点的树 有n-1个边 因此有**n-1个非空指针** n个节点的四叉树有&#10;**4n个指针**&#10;&#10;一个包含n个节点的四叉树，每个节点都有四个指向孩子节点的指针，这4n个指针中有多少个空指针（）&#10;&#10;A\&#10;\&#10;2n+1\&#10;B\&#10;3n-1\&#10;C\&#10;3n\&#10;D\&#10;3n+1&#10;&#10;D&#10;&#10;**n个结点为一棵树则有n-1条边**，**因此有n-1个非空指针**&#10;&#10;空指针个数4*n-(n-1)=3*n+1 \&#10;收起 \&#10;44\&#10;回复\&#10;发布于 2017-01-26 19:59&#10;&#10;赖卓成2018102015432">
  </outline>
  <outline text="数组的一些方法" _note="**sort()会改变原数组**&#10;&#10;sort()&#10;方法就地对数组的元素进行排序，并返回对相同数组的引用。默认排序是将元素转换为字符串，然后按照它们的&#10;UTF-16 码元值升序排序。\&#10;会改变数组的方法：&#10;&#10;**slice() 不会改变原数组**\&#10;**slice() 方法返回一个新的数组对象**，这一对象是一个由 `start` 和 `end`&#10;决定的原数组的浅拷贝（`包括 start`，`不包括 end`），其中`start` 和&#10;`end`代表了数组元素的索引。原始数组不会被改变。&#10;&#10;push()\&#10;pop()\&#10;shift()\&#10;unshift()\&#10;splice()\&#10;sort()\&#10;reverse()&#10;&#10;不会改变数组的方法： \&#10;forEach()\&#10;filter()\&#10;concat() \&#10;slice()\&#10;map()">
  </outline>
  <outline text="构造函数里面的 return值" _note="如果以下程序的输出结果是false，则①式可以替换为（） return test;&#10;&#10;``` javascript&#10;const test = {&#10;  rules: false&#10;};&#10;function Build() {&#10;    this.rules = true;&#10;        ①&#10;}&#10;const build = new Build();&#10;console.log(build.rules);&#10;```&#10;&#10;在构造函数里面，如果不写return的话默认就是返回创建的实例对象，但是如果加入了return的话，如果return的是一个基本数据类型的话比如，boolean,number,undefined等那么仍然返回实例对象，如果返回的是一个对象的话，则返回该对象，原本的指向实际对象的this会被无效化">
  </outline>
  <outline text="数组常用方法记忆技巧" _note="1.  **添加和删除元素**&#10;&#10;    -   `push()`：向数组末尾添加一个或多个元素。&#10;&#10;    -   `pop()`：移除数组的最后一个元素，并返回该元素。&#10;&#10;    -   `shift()`：移除数组的第一个元素，并返回该元素。&#10;&#10;    -   `unshift()`：向数组开头添加一个或多个元素。&#10;&#10;    -   `splice()`：从数组中添加或删除元素。&#10;&#10;2.  **搜索元素**&#10;&#10;    -   `indexOf()`：查找元素的索引，如果不存在返回-1。&#10;&#10;    -   `lastIndexOf()`：从数组末尾开始查找元素的索引。&#10;&#10;    -   `includes()`：检查数组是否包含某个元素。&#10;&#10;3.  **遍历数组**&#10;&#10;    -   `forEach()`：对数组中的每个元素执行一次提供的函数。&#10;&#10;    -   `map()`：创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。&#10;&#10;    -   `filter()`：创建一个新数组，包含通过所提供函数实现的测试的所有元素。&#10;&#10;    -   `reduce()`：对数组中的值进行汇总，返回一个值。&#10;&#10;4.  **数组转换**&#10;&#10;    -   `slice()`：提取原数组的一部分，并返回一个新数组。&#10;&#10;    -   `concat()`：合并两个或多个数组。&#10;&#10;5.  **排序数组**&#10;&#10;    -   `sort()`：对数组元素进行排序。&#10;&#10;    -   `reverse()`：颠倒数组中元素的顺序。&#10;&#10;**记忆技巧**：&#10;&#10;-   **添加和删除**：想象你在玩一堆积木，`push` 和 `pop`&#10;    就像是在积木堆的顶部添加或移除积木，而 `shift` 和 `unshift`&#10;    就像是在积木堆的底部操作。&#10;&#10;-   **搜索元素**：想象你在人群中寻找你的朋友，`indexOf`&#10;    是从前面开始找，`lastIndexOf` 是从后面开始找，`includes`&#10;    是检查你的朋友是否在人群中。&#10;&#10;-   **遍历数组**：想象你在为每个苹果（数组中的元素）做不同的处理，`forEach`&#10;    是简单地查看每个苹果，`map` 是给每个苹果贴标签，`filter`&#10;    是选出好的苹果，`reduce` 是计算所有苹果的总重量。&#10;&#10;-   **数组转换**：`slice` 是切一块苹果派，`concat` 是把几块派拼在一起。&#10;&#10;-   **排序数组**：`sort` 是把苹果按大小排序，`reverse`&#10;    是把苹果堆的顺序颠倒过来。&#10;&#10;通过这些生动的比喻和记忆技巧，你可以更容易地记住JavaScript数组的常用方法。">
  </outline>
  <outline text="数据比较" _note="下列表达式中，返回值为true的是（）&#10;&#10;①Object.is(NaN,NaN)&#10;&#10;②Object.is(+0,-0)&#10;&#10;③NaN === NaN&#10;&#10;④+0 === -0&#10;&#10;①④&#10;&#10;``` javascript&#10;&#10;console.log(null == false);             //           false&#10;console.log(null == true);            //   false&#10;console.log(undefined == false);//false&#10;console.log(undefined == true); //false&#10;console.log(undefined == null); //true&#10;console.log(undefined == undefined);// true&#10;console.log(null == null); //true  &#10;  NaN == NaN // false&#10; NaN === NaN // false&#10;&#10; // indexOf方法无法识别数组的NaN成员&#10; [NaN].indexOf(NaN) // -1&#10;&#10; // 向 Set 数据结构中加入值时认为NaN等于自身&#10; let set = new Set();&#10; set.add(NaN);&#10; set.add(NaN);&#10; console.log(set); // Set {NaN}&#10;&#10; // Object.is()方法认为NaN等于NaN&#10; Object.is(NaN, NaN) // true&#10; +0 === -0 //true&#10; Object.is(+0, -0) // false&#10;&#10; // ES7中新增的数组实例方法，includes()方法认为NaN等于自身&#10; [1, 2, NaN].includes(NaN) // true&#10;```">
  </outline>
  <outline text="Vue路由守卫" _note="&gt; 全局路由守卫的钩子函数有：beforeEach（全局前置守卫）、beforeResolve（全局解析守卫）、afterEach（全局后置守卫）&#10;&gt; 名字中间没有&quot;Route&quot;， 组件级路由守卫的钩子函数才有&quot;Route&quot;&#10;&gt;&#10;&gt; 作者：牛客264234369号\&#10;&gt; 链接：&lt;https://www.nowcoder.com/exam/test/81219049/submission?pid=57475562&gt;\&#10;&gt; 来源：牛客网&#10;&#10;&gt; 全局：beforeEach(前置守卫)，beforeResolve(解析守卫)，afterEach(后置守卫)&#10;&gt;&#10;&gt; 单个路由守卫：beforeEnter&#10;&gt;&#10;&gt; 局部路由守卫：beforeRouteEnter（前置守卫），beforeRouteLeave(后置守卫)，beforeRouteUpdate（路由改变守卫）&#10;&gt;&#10;&gt; 作者：一世长安\_\&#10;&gt; 链接：&lt;https://www.nowcoder.com/exam/test/81219049/submission?pid=57475562&gt;\&#10;&gt; 来源：牛客网&#10;&#10;在Vue中，路由守卫（Route&#10;Guards）是一种权限控制机制，用于在路由跳转发生之前或之后执行代码，从而控制页面的访问权限。Vue&#10;Router提供了多种路由守卫，包括==全局守卫、路由独享的守卫和组件内的守卫==。&#10;&#10;1.  全局路由守卫&#10;&#10;全局路由守卫可以在路由配置之前或之后全局应用，适用于所有路由。&#10;&#10;**例子：**&#10;&#10;``` javascript&#10;// 在router/index.js中&#10;import Vue from 'vue';&#10;import Router from 'vue-router';&#10;import Home from '@/components/Home';&#10;import Admin from '@/components/Admin';&#10;&#10;Vue.use(Router);&#10;&#10;const router = new Router({&#10;  routes: [&#10;    { path: '/', component: Home },&#10;    { path: '/admin', component: Admin }&#10;  ]&#10;});&#10;&#10;// 全局前置守卫&#10;router.beforeEach((to, from, next) =&gt; {&#10;  if (to.path === '/admin') {&#10;    // 判断用户是否登录&#10;    if (/* 用户未登录 */) {&#10;      next({ path: '/login' }); // 未登录重定向到登录页&#10;    } else {&#10;      next(); // 已登录放行&#10;    }&#10;  } else {&#10;    next(); // 其他路由放行&#10;  }&#10;});&#10;&#10;export default router;&#10;```&#10;&#10;1.  单个路由守卫&#10;&#10;单个路由守卫是针对特定路由的，可以在路由配置中定义。&#10;&#10;**例子：**&#10;&#10;``` javascript&#10;// 在router/index.js中&#10;const router = new Router({&#10;  routes: [&#10;    { path: '/', component: Home },&#10;    {&#10;      path: '/admin',&#10;      component: Admin,&#10;      beforeEnter: (to, from, next) =&gt; {&#10;        // 判断用户是否登录&#10;        if (/* 用户未登录 */) {&#10;          next({ path: '/login' }); // 未登录重定向到登录页&#10;        } else {&#10;          next(); // 已登录放行&#10;        }&#10;      }&#10;    }&#10;  ]&#10;});&#10;```&#10;&#10;1.  组件内部路由守卫&#10;&#10;组件内部路由守卫是直接在组件内部定义的，可以在组件的生命周期钩子中使用。&#10;&#10;**例子：**&#10;&#10;``` javascript&#10;// 在Admin.vue组件中&#10;export default {&#10;  template: '...',&#10;  beforeRouteEnter(to, from, next) {&#10;    // 在渲染该组件的对应路由被确认前调用&#10;    // 不能获取组件实例 `this`，因为当守卫执行前，组件实例还没被创建&#10;    if (/* 用户未登录 */) {&#10;      next({ path: '/login' }); // 未登录重定向到登录页&#10;    } else {&#10;      next(); // 已登录放行&#10;    }&#10;  },&#10;  beforeRouteUpdate(to, from, next) {&#10;    // 当路由改变且该组件被重用时被调用&#10;    // 可以获取组件实例 `this`&#10;    if (/* 用户未登录 */) {&#10;      next(false); // 强制停止路由变更&#10;    } else {&#10;      next(); // 允许路由变更&#10;    }&#10;  }&#10;};&#10;```&#10;&#10;在实际应用中，你需要根据实际的登录状态和业务逻辑来实现具体的权限控制逻辑。">
  </outline>
  <outline text="原型链问题" _note="以下代码执行后，a.x 和 b.x 的结果分别为（）&#10;&#10;2 undefined&#10;&#10;``` javascript&#10;function A(x){&#10;  this.x = x;&#10;}&#10;A.prototype.x = 1;&#10;&#10;function B(x){&#10;  this.x = x;&#10;}&#10;B.prototype = new A(); //B.prototype = {x:undefined} &#10;var a = new A(2), b = new B(3);//b = {x:3}&#10;delete b.x;//b = {} b.__proto__ ={x:undefined}&#10;```&#10;&#10;b的prototype=new&#10;A(),想错的可能都认为构造函数的x没有赋值就自动去原型下找，错了，&#10;&#10;如果构造函数没有x才会去原型下找，\&#10;如果有x但是没有赋值，则是undefined,相当于x=undefined.就不会进入原型链了">
  </outline>
  <outline text="不能冒泡的事件" _note="以下是JavaScript中不能冒泡的事件列表：&#10;&#10;focus：当元素获得焦点时触发。\&#10;blur：当元素失去焦点时触发。\&#10;focusin：当元素即将获得焦点时触发。\&#10;focusout：当元素即将失去焦点时触发。\&#10;load：当页面或图片等资源加载完成时触发。\&#10;unload：当页面即将卸载时触发。\&#10;resize：当浏览器窗口大小改变时触发。\&#10;scroll：当文档或元素滚动时触发。\&#10;DOMContentLoaded：当DOM树完全加载并解析完成时触发，不等待样式表、图片和子框架完成加载。\&#10;mouseenter：当鼠标指针进入一个元素的边界时触发。\&#10;mouseleave：当鼠标指针离开一个元素的边界时触发。\&#10;change：当元素的值发生变化时触发（通常用于表单元素）。\&#10;input：当`&lt;input&gt;`{=html}, `&lt;select&gt;`{=html}, 或&#10;`&lt;textarea&gt;`{=html}元素的值发生变化时触发。">
  </outline>
  <outline text="堆排序" _note="题目\&#10;对关键码序列{9, 27, 18, 36, 45, 54,&#10;63}进行堆排序，输出2个最大关键码后的剩余堆是（）。\&#10;A\&#10;{9, 18, 27, 36, 45}\&#10;B\&#10;{9, 18, 45, 27, 36}\&#10;C\&#10;{45, 9, 18, 27, 36}\&#10;D\&#10;{45, 36, 18, 9, 27}&#10;&#10;1.  构建最大堆：从无序数组开始，将其构建成一个最大堆。在这个过程中，每个父节点都比其子节点大。&#10;&#10;2.  交换并调整堆：将堆顶元素（最大值）与数组的最后一个元素交换&#10;    从堆中拿出这个最大值，然后调整堆，使其再次成为最大堆。&#10;&#10;3.  重复过程：重复上述过程，直到堆中只剩下一个元素，此时数组已经完成排序。">
  </outline>
  <outline text="undefined隐式转换成Number类型值为NaN" _note="执行下列选项的程序，输出结果不是undefined的是（）&#10;&#10;``` javascript&#10;A function fn(a,b){&#10;	console.log(b);&#10;}&#10;fn(1);&#10;B console.log(undefined + 1);&#10;C var arr = [];&#10;arr.length = 2;&#10;arr[0] = 1;&#10;console.log(arr[1]);&#10;D&#10;function fun(){}&#10;console.log(fun());&#10;```&#10;&#10;**考点：\**undefined隐式转换成Number类型值是啥\****&#10;&#10;**1）Number(undefined) 结果是NaN**，所以NaN+1 = NaN&#10;&#10;**2）Number(null)** 结果是0&#10;&#10;3）Number(\'a\')结果是NaN&#10;&#10;4) Number(\'\')结果是0&#10;&#10;5) Number(true)结果是1&#10;&#10;6) Number(false)结果是0&#10;&#10;7) Number(\[\])结果是0&#10;&#10;8) Number({})结果是NaN&#10;&#10;作者：笨笨只会灭火\&#10;链接：&lt;https://www.nowcoder.com/exam/test/84060625/submission?pid=59133776&gt;\&#10;来源：牛客网">
  </outline>
  <outline text="刷题时候遇到的问题-原型链问题" _note="``` javascript&#10;var A = {n:4399};&#10;var B = function(){this.n = 9999};&#10;var C = function(){var n = 8888};&#10;B.prototype = A;&#10;C.prototype = A;&#10;var b = new B();&#10;var c = new C();&#10;A.n++; // 这里增加了A对象的n属性值&#10;console.log(b.n); // 输出 9999，因为b对象有自己的n属性&#10;console.log(c.n); // 输出 4400，因为c对象没有自己的n属性，所以访问A对象的n属性&#10;```&#10;&#10;-    ==delete&#10;    操作符用于删除对象的某个属性；==如果没有指向这个属性的引用，那它最终会被释放。&#10;&#10;`typeof`&#10;能判断类型有：number、string、boolean、symbol、undefined、function；&#10;**object、\***\*array、null\*\* 的变量都返回 object&#10;&#10;`&lt;img src='https://i-blog.csdnimg.cn/blog_migrate/2aa10cee5ae01d3876997c82beb48228.png'&gt;`{=html}&#10;&#10;`Object.prototype.toString()`为 Object&#10;对象的实例方法，默认情况下（即不重写该方法），返回参数的类型字符串。&#10;&#10;`&lt;img src='https://i-blog.csdnimg.cn/blog_migrate/bb82f556e43db1c36974f0db1a77f88b.png'&gt;`{=html}&#10;&#10;Array&#10;为`js`的原生对象，它有一个静态方法：`Array.isArray()`，能判断参数1是否为数组&#10;&#10;`&lt;img src='https://i-blog.csdnimg.cn/blog_migrate/2aa10cee5ae01d3876997c82beb48228.png'&gt;`{=html}">
  </outline>
  <outline text="class和let一样都有暂时性死区，在被声明前无法访问" _note="也就是在当前作用域能找到，但是要在声明后才能访问\&#10;**`es6中的class`和`let const`一样都不存在提升\&#10;（实际存在提升，只是因为`TDZ`的作用，并不会像var那样得到undefined,而是直接抛出错误）**&#10;&#10;临时死区（Temporal Dead Zone），简写为`TDZ`。&#10;&#10;`let` 和 `const`&#10;声明的变量不会被提升到[作用域](https://so.csdn.net/so/search?q=作用域&amp;spm=1001.2101.3001.7020)顶部，如果在声明前访问这些变量，会导致错误：&#10;&#10;``` javascript&#10;原来的代码&#10;var a = 1;&#10;function test(){&#10;    //console.log(a) 位置A&#10;class a {}&#10;   // console.log(a) 位置B&#10;}&#10;test();&#10;&#10;实际上提升后的&#10;var a = 1;&#10;function test(){&#10;    console.log(a) 位置A //在test()作用域内找得到a&#10;//是一个class但是存在TDZ暂时性死区，访问报错&#10;    class a {}&#10;    console.log(a) 位置B //a已经声明创建出来了&#10;}&#10;test()&#10;```&#10;&#10;-   in操作符，对于数组属性需要指定数字形式的**索引值**来表示数组的属性名称（固有属性除外，如length）。&#10;&#10;-   所以说在这里，1 in&#10;    \[1\]并不是表示数字1在不在数组里。而是表示数组中含不含有1这个索引index值。&#10;    数组长度为1，所以只含有的index值为0，这个表达式返回`fasle`。&#10;&#10;-   任何数值除以0都会导致错误而终止程序执行。但是在 JavaScript&#10;    中，**会返回出特殊的值**，因此不会影响程序的执行。&#10;&#10;-   比0大的数除以0，则会得到无穷大，所以 js 用 Infinity 来显示出来。&#10;&#10;-   也就是1/0得到的是Infinity。`isNaN(1/0)`返回的是`false`。但是`isNaN(0/0)`返回的就是true&#10;&#10;1 &amp;&amp; 2 \&gt; 1，先判断右边的表达式，2\&gt;1返回true。1 &amp;&amp;&#10;true返回的结果也是true。\&gt;号的权重大于&amp;&amp;，所以先是右边开始&#10;&#10;**Array对象方法**&#10;&#10;`&lt;img src= 'https://i-blog.csdnimg.cn/blog_migrate/9522aa804b255cf785b62e7e6e383232.png'&gt;`{=html}&#10;&#10;`js`基本数据类型包括：&#10;&#10;1.Number&#10;&#10;`typeof` 123 =\&gt;\&quot;number\&quot;&#10;&#10;2.String&#10;&#10;typeof `'abc'` =\&gt;\&quot;string\&quot;&#10;&#10;3.Boolean&#10;&#10;`typeof   true`=\&gt;\&quot;boolean\&quot;&#10;&#10;4.Function&#10;&#10;`typeof   console.log()`=\&gt;\&quot;function\&quot;&#10;&#10;5.Object&#10;&#10;`typeof`null =\&gt;\&quot;object\&quot;&#10;&#10;`typeof` { } =\&gt;\&quot;object\&quot;&#10;&#10;`typeof` \[ \] =\&gt;\&quot;object\&quot;&#10;&#10;6.Undefined&#10;&#10;`typeof` undefined =\&gt;\&quot;undefined\&quot;&#10;&#10;题中的Array属于数组对象&#10;&#10;`typeof` new Array() =\&gt;\&quot;object\&quot;&#10;&#10;值得一提的是`typeof`打印出的类型都是字符串类型，且首字母小写&#10;&#10;例如：typeof(typeof undefined) =\&gt;\&quot;string\&quot;">
  </outline>
</outline>
<outline text="类" _note="类的本质是函数，实际上，ES6中的类可以视为ES5中构造函数的另一种写法&#10;&#10;类的所有实例方法均定义在类的原型对象上，因此，在类内定义的实例方法和在类的原型对象上定义方法是等价的&#10;&#10;数组的sort()方法&#10;&#10;**升序排序 return a - b； 降序排序 return b - a。**&#10;&#10;==setMonth(n)==这里是**0-11分别对应1-12月**\&#10;由于存在变量提升，在if语句执行之前会先使用var声明变量a，并且声明时是在全局作用域下，因此变量a自动成为window对象的属性，故a&#10;in&#10;window的返回结果为true，使用&quot;!&quot;将条件取反后返回结果为false，所以不会执行if中的赋值语句，a值为undefined&#10;&#10;数组的方法&#10;&#10;pop（）方法用于删除数组的最后一个元素，并返回被删除的最后一个元素，这样的话数组就被改变了。&#10;splice()方法可以对数组中已经存在元素进行删除，也可以添加元素到数组中。&#10;sort()方法对数组中所有的元素都进行排序，如果没有提供比较函数compareFunction，则按照字符串的Unicode码的顺序进行排序。&#10;所以以上三种方法都改变了数组。 而&#10;concat()方法用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本，返回一个新的数组。该数组是通过把所有的arrayX参数添加到arryaObject中生成的，如果要进行&#10;concat()操作的参数是数组，那么添加的是数组中的元素，而不是数组。">
</outline>
  </body>
</opml>
