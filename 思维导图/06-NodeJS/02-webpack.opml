<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <dateModified></dateModified>
    <ownerName></ownerName>
  </head>
  <body>
<outline text="webpack" _note="现在我们接触了node可以发现，再node环境下做开发的时候会有大量的依赖文件生成，这个时候会导致一些问题&#10;&#10;-   同一个JS文件在不同的页面中进行引入，能否导入一次之后按需加载&#10;&#10;-   因为前端代码是直接运行在浏览器里面，所以我们也不能使用最新语法，因为要考虑兼容性的问题&#10;&#10;-   我们页面会有很多css3.0的样式，这些样式代码也需要考虑兼容性的问题&#10;&#10;-   一个网页当中的css文件和js文件非常多，这些文件都是同script和link标签导入的，这样导入会导致页面请求次数过多&#10;&#10;需要处理以上的问题，我们就需要一种打包技术&#10;&#10;目前的打包工具有很多：&#10;&#10;1、gulp&#10;&#10;2、grunt&#10;&#10;3、webpack&#10;&#10;4、rollup&#10;&#10;5、rolldown">
  <outline text="1、什么是webpack" _note="我们可以把webpack理解成是一个产品经理，他本身不干任何事情，他如果想干什么事情会找别人来做（第三方模块插件）&#10;&#10;webpack可以将各种松散的资源打包到一起，可以实现按需加载，同时打包的过程当中可以加载第三方的模块和插件来实现一些特殊效果，比如，提高css的兼容性，将ES6的代码转换成ES5">
  </outline>
  <outline text="2、webpack的四个核心点" _note="1、入口 entry&#10;&#10;2、出口 output&#10;&#10;3、模块 loader&#10;&#10;4、插件 plugin&#10;&#10;入口决定了程序在什么地方开始，出口决定了程序打包之后生成的地方，loader决定了当前你使用什么规则来处理你需要打包的代码，插件决定了打包好之后的可以干什么">
  </outline>
  <outline text="3、webpack安装" _note="``` cmd&#10;npm i webpack webpack-cli -D&#10;```&#10;&#10;webpack：打包工具本身&#10;&#10;webpack-cli：让webpack可以使用命令行来操作&#10;&#10;Person.js&#10;&#10;``` javascript&#10;class Person {&#10;    constructor(nickName){&#10;        this.nickName = nickName;&#10;    }&#10;}&#10;export default Person&#10;```&#10;&#10;Student.js&#10;&#10;``` javascript&#10;&#10;import Person from './Person.js';&#10;class Student extends Person {&#10;    constructor(nickName, sex) {&#10;        super(nickName);&#10;        this.sex = sex;&#10;    }&#10;    sayHello() {&#10;        console.log(`大家好，我叫${this.nickName}`);&#10;    }&#10;}&#10;export default Student;&#10;```&#10;&#10;index.js&#10;&#10;``` javascript&#10;import Student from &quot;./Student.js&quot;;&#10;let s = new Student(&quot;张三&quot;,&quot;男&quot;);&#10;s.sayHello();&#10;```&#10;&#10;现在我们使用node执行index.js文件，会发现一个问题，nodeJS是不支持ESModule，它会报错，所以我们可以使用webpack来整合一下&#10;&#10;现在我们知道index.js是整个程序的入口&#10;&#10;现在我们可以在package.json中配置一个执行脚本build&#10;&#10;``` json&#10;&quot;build&quot;:&quot;webpack ./index.js -o ./dist&quot;&#10;```&#10;&#10;&gt; 在package.json文件中有一个scripts选项，这个选项是用来编辑npm执行脚本的一个选项，当我们有一些工具的命令需要使用的时候，我们可以通过该选项进行一个封装处理，包装成一个npm指令&#10;&gt;&#10;&gt; 这个时候，当一些工具的指令需要配置环境变量的时候，我们就不需要配置了，直接npm自己会帮我们去直接找到对应的指令文件来执行&#10;&#10;然后我们只需要执行`npm run build` 来启动webpack打包即可&#10;&#10;上面我们进行了简单的webpack运行，并没有加载任何配置，这种方式我们基础上是不用的，因为我们使用webpack除了整合项目之外，还需要使用大量的第三方模块和插件来完成一些更高级的功能，所以需要一些更精细划的配置行为，这个时候，我们就开始真正的配置webpack">
  </outline>
  <outline text="4、webpack配置" _note="webpack配置分为两个情况：&#10;&#10;1、生产环境&#10;&#10;2、开发环境">
    <outline text="4.1、生产环境配置" _note="&gt; 注意：&#10;&gt;&#10;&gt; 我们这里虽然是配置的生产环境的配置，但是我们实际在写mode的时候会写成development，这里主要是为了方便观察打包之后的代码，因为生产环境打包后的代码会压缩，没有格式，可读性非常差&#10;&#10;**在当前项目下新建一个js文件叫做webpack.config.js**&#10;&#10;``` javascript&#10;//我们把这个文件看成事webpack的配置文件，以后的webpack就使用这个配置文件进行&#10;打包;&#10;//webpack的配置文件中，使用CommonJS模块化规范&#10;const path = require(&quot;path&quot;);&#10;const config = {&#10;    //mode设置webpack基于开发或者生产环境打包&#10;    mode: &quot;development&quot;,&#10;    //entry设置webpack的入口文件路径&#10;    entry: path.join(__dirname, &quot;./js/index.js&quot;),&#10;    //output设置webpack打包之后生成的新文件的文件名和保存路径&#10;    output: {&#10;        filename: &quot;bundle.js&quot;,&#10;        path: path.join(__dirname, &quot;./dist&quot;),&#10;        publicPath: &quot;./&quot;&#10;    },&#10;    //module在打包过程根据你自己的需求载入webpack的第三方模块，对打包过程添&#10;    加规则&#10;    module: {&#10;    &#10;    },&#10;    //plugins对webpack本身的打包功能做额外的扩展配置&#10;    plugins: [&#10;    ]&#10;};&#10;module.exports = config;&#10;```&#10;&#10;接下来在package.json中修改webpack的驱动脚本，因为我们已经通过配置文件配置了webpack的入口和出口，所以不再需要直接在webpack指令后面设置入口和出口，同时将webpack的启动配置为通过webpack.config.js文件作为配置文件进行启动&#10;&#10;``` javascript&#10;&quot;build&quot;:&quot;webpack --config ./webpack.config.js&quot;&#10;```&#10;&#10;以上代码就表示，现在webpack在启动的时候需要使用webpack.config.js文件作为配置文件使用&#10;&#10;&gt; **强调：**&#10;&gt;&#10;&gt; 在上面的配置文件中，我们把mode写成了development，这样生成的代码是没有经过压缩的，方便我们阅读，但是实际写的配置还是生产环境下的5、babel的配置与使用">
    </outline>
  </outline>
  <outline text="5、babel的配置与使用" _note="babel的本身就是一个完整的JS编译器，其主要作用就是对JS的语法进行兼容处理，babel根据模块化的思维拆分成了多个模块组成，所有的babel模块都做为一个独立的npm包发布的，起始范围@babel（从babel7开始）&#10;&#10;-   \@babel/core 将源代码转换成抽象语法树（AST）&#10;&#10;-   \@babel/cli 可以使用babel使用命令行编译文件&#10;&#10;-   \@babel/plugin\* 语法转换插件&#10;&#10;-   \@babel/preset-env ES6语法转换插件的集合&#10;&#10;-   \@core-js ES6新增API的补丁：这个主要是用ES5来实现ES6+的API，比如像&#10;&#10;-   Proxy，Symbol由于ES5局限性，无法对其转换&#10;&#10;-   \@babel/plugin-transform-runtime&#10;    复用帮助模块，为代码创建一个沙盒环境&#10;&#10;现在我们已经配置了好了基础的配置文件，现在需要提高JS代码的兼容性，**将ES6+的语法转换成ES5的代码**，&#10;**但是webpack本身是不具备这个功能的**，**它需要借助第三方的loader来实现，而babel就是专门用来转换ES代码**&#10;&#10;**安装所需要的包**&#10;&#10;``` cmd&#10;npm i babel-loader @balbel/core -D&#10;```&#10;&#10;-   babel-loader 基于webpack的babel模块包&#10;&#10;-   \@balbel/core 实现ES转换编译的核心&#10;&#10;配置规则：&#10;&#10;``` javascript&#10;module: {&#10;    //rules是一个webpack的规则数组，数组中的每一个元素就是一条规则，每一条规&#10;    则就是一个匿名的配置对象;&#10;    rules: [&#10;        //创建一条规则，这条规则适用于所有的JS文件&#10;        {&#10;            test: /\.js$/, //匹配所有的JS文件&#10;            exclude: /node_modules/, //把mode_modules目录中的js文件&#10;            排除在babel的转换以外&#10;            loader: &quot;babel-loader&quot; //把当前规则所匹配的JS文件在打包过&#10;            程中需要进入到babel中进行处理&#10;        }&#10;    ];&#10;}&#10;```&#10;&#10;&gt; 代码分析：&#10;&gt;&#10;&gt; 上面的代码的意思，告诉webpack如果匹配到了除node_modules目录以外的JS文件，就使用第三方模块babel-loader来进行处理&#10;&gt;&#10;&gt; 当我们去配置上面的规则之后，我们发现JS代码并没有转换成ES5的，为什么？">
    <outline text="5.1、配置babel的预设信息" _note="如果要让babel来处理自己的JS代码，一定要告诉它你的预设信息是什么（就是你最终想要的效果是什么）&#10;&#10;**在项目目录中创建一个文件，取名 .babelrc，作为语法转换的配置文件**&#10;&#10;下载@babel/preset-env&#10;&#10;``` cmd&#10;npm i @babel/preset-env -D&#10;```&#10;&#10;怎么来理解这个包的作用，我们可以把名字拆成两半来看&#10;&#10;-   preset 预设好的插件集合包&#10;&#10;-   env 目标环境&#10;&#10;Babel编译的是ES6+的语法，这个编译是同plugin语法转换插件来实现的，但是每年都会有新的ES提案，也就是新的语法，但是我们不可能一个一个插件去单独配置，所以有了preset这个东西，我们就不需要再单独一个一个的进行配置，只要有新语法的转化插件，只需要把这个插件装入preset插件集合包当中就可以自动配置&#10;&#10;所以这个包的作用就是根据当前的配置来进行**自动化的语法转换**&#10;&#10;&gt; **但是在ES6 除了语法以外，还有很多新增的API**&#10;&#10;比如，Map，Set，Reflect，Proxy，这些对象在ES5中是不存在的，怎么办？&#10;&#10;为什么了弥补ES5里面没有ES6新增的对象特点，babel还需要加载一个core-js&#10;&#10;``` cmd&#10;npm i @babel/plugin-transform-runtime @babel/runtime core-js@3 -D&#10;```&#10;&#10;1、**core-js@3**\&#10;这个包主要的作用就是在于实现ES6新增语法API的转换&#10;&#10;2、**\@babel/runtime**（这个包在安装@babel/preset-env会一起安装，但是我们还是再安装一次）&#10;&#10;在实现ES语法转换的时候，@babel/preset-env&#10;依赖包会在JS文件中注入一些辅助函数来帮助高版本语法向底版本语法兼容的转换，但是，我们实际项目中会有非常多的JS文件的，那么就意味着，这些辅助函数在没有一个JS文件中都会被注入一遍，这个时候通过@babel/runtime可以将这些辅助函数做一个npm依赖包，通过导入的方式在所需要转换的JS文件中注入辅助函数，从而压缩项目体积，提高代码复用&#10;&#10;3、**\@babel/plugin-transform-runtime**&#10;&#10;上面我们提供@babel/runtime&#10;将辅助函数作为一个npm包进行引用，但是这个引用的过程是一个手动的，需要开发者自己手动在需要转换的JS文件中写入引入代码，同时，@babel/preset-env的编译会给转换的JS文件写入一遍辅助函数，所以需要我们把@babel/preset-env写入的辅助函数删除掉，同时又要把@babel/runtime包中的辅助函数自动引入，@babel/plugin-transform-runtime就可以实现&#10;&#10;&gt; **扩展内容：**&#10;&gt;&#10;&gt; **\@babel/plugin-transform-runtime** **三大作用**&#10;&gt;&#10;&gt; 1、自动移除语法转换后内联的辅助函数（inline Babel helpers），使用&#10;&gt;&#10;&gt; \@babel/runtime/helpers 里面的辅助函数来替换&#10;&gt;&#10;&gt; 2、当代码里面使用了core-js的API，自动引入@babel/runtime-corejs3/core&#10;&gt;&#10;&gt; js-stable，以此作为替换全局引入的core-js/stable&#10;&gt;&#10;&gt; 3、当代码中使用 Generator / async函数，自动引入&#10;&gt;&#10;&gt; \@babel/runtime/regenrator，以此来替代全局引入的regenrator-rumtime/runtime&#10;&gt;&#10;&gt; **注意：**&#10;&gt;&#10;&gt; 我们现在安装了一个core-js@3包，这个包的作用上面我们也提到过，可以让ES5实现ES6+的新增API，但是，无法转换生成器函数和async函数，所以我们会使用@babel/ployfill（已被弃用）这个包来进行补齐，不过这种方式会造成全局污染，例如，Promise，我们的ployfill是对浏览器的全局对象进行重新赋值，重写了Promise及其原型链，这个时候JS开发的就会出现冲突，这个时候@babel/plugin-transform-runtime的第二条作用就可以解决这个问题，第三条作用其实也一样&#10;&gt;&#10;&gt; 但是，这里还有一个情况，因为polyfill已经被弃用，那么就意味着我们不能使用这个包进行补齐，其实我们稍微了解以西polyfill这个包的本质就可以解决这个问题，其实这个polyfill包内部包含了两个包，分别就是core-js和regenerator-runtime，core-js我们知道是干嘛的，regenerator-runtime这个包作用是用来补齐生成器函数和async函数，而上面的第三条的作用就是自动引入@babel/runtime/regenrator，而这个包等价于regenerator-runtime的作用，而@babel/runtime/regenrator这个包在安装@babel/preset-env的时候就已经内置安装了，不给过在我们当前项目中，我们一般还是会再单独安装一遍@babel/runtime&#10;&#10;同时基于上面的内容，我们还可以安装一个包 \@babel/runtime-corejs3&#10;&#10;``` cmd&#10;npm i @babel/runtime-corejs3 -D&#10;```">
    </outline>
    <outline text="5.2、配置babel-loader预设" _note="上面我们再项目的根目录中创建一个`.babelrc`文件，这个文件作为我们再webpack中载入babel-laoder的配置文件使用&#10;&#10;&gt; 注意：&#10;&gt;&#10;&gt; 文件名于文件路径不要随意更改，并且这里写的配置语法是一个JSON对象，基于基本键值对的逻辑来完成的配置&#10;&#10;.babelrc&#10;&#10;``` json&#10;// babel的配置文件&#10;{&#10;  // 预设信息&#10;    &quot;presets&quot;: [&#10;        // 代表现在使用默认配置好的插件包集合&#10;        [&#10;            &quot;@babel/preset-env&quot;,{&#10;                // 使用了插件包中的哪个插件，在打包的时候就打包哪个插件&#10;                &quot;useBuiltIns&quot;:&quot;usage&quot;,&#10;                // 指定core-js 的版本是3&#10;                &quot;corejs&quot;:&quot;3&quot;,&#10;                // 目标环境&#10;                &quot;targets&quot;:{&#10;                    &quot;browsers&quot;:[&#10;                        // &quot;ie 6&quot;&#10;                        //最新的两个大版本&#10;                        &quot;last 2 versions&quot;,&#10;                       //全球使用人数超过1%的浏览器&#10;                        &quot;&gt; 1%&quot;,&#10;                      //排除超过两年没有更新的浏览器&#10;                        &quot;not dead&quot;&#10;                        //这里最终的过滤结果就是通过last 2 versions筛选的浏览器中，全球使用率低于1%  且官方声明不再维护或者事实上已经两年没有更新过版本的浏览器&#10;                    ]&#10;                }&#10;            }&#10;        ]&#10;    ],&#10;    &quot;plugins&quot;: [&#10;        &quot;@babel/plugin-transform-runtime&quot;&#10;    ]&#10;}&#10;```&#10;&#10;**useBuiltIns：**&#10;&#10;-   entry：再打包入口文件中导入API的补齐模块&#10;&#10;-   usage 自动打包需要使用的模块，没用的不管&#10;&#10;-   false 默认值&#10;&#10;**targets：**&#10;&#10;-   browsers 设置目标环境（需要兼容的浏览器）&#10;&#10;**modules：**&#10;&#10;-   commonjs 使用commonjs模块化语法做导入导出&#10;&#10;-   auto&#10;&#10;-   1false 使用ESModules规范">
    </outline>
  </outline>
</outline>
  </body>
</opml>
